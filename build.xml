<?xml version="1.0" encoding="UTF-8"?>
<!-- You may freely edit this file. See commented blocks below for -->
<!-- some examples of how to customize the build. -->
<!-- (If you delete it and reopen the project it will be recreated.) -->
<!-- By default, only the Clean and Build commands use this build script. -->
<!-- Commands such as Run, Debug, and Test only use this build script if -->
<!-- the Compile on Save feature is turned off for the project. -->
<!-- You can turn off the Compile on Save (or Deploy on Save) setting -->
<!-- in the project's Project Properties dialog box.-->
<project name="Maimonides" default="default" basedir=".">
    <description>Builds, tests, and runs the project Maimonides.</description>
    <import file="nbproject/build-impl.xml"/>
    <!--

    There exist several targets which are by default empty and which can be 
    used for execution of your tasks. These targets are usually executed 
    before and after some main targets. They are: 

      -pre-init:                 called before initialization of project properties
      -post-init:                called after initialization of project properties
      -pre-compile:              called before javac compilation
      -post-compile:             called after javac compilation
      -pre-compile-single:       called before javac compilation of single file
      -post-compile-single:      called after javac compilation of single file
      -pre-compile-test:         called before javac compilation of JUnit tests
      -post-compile-test:        called after javac compilation of JUnit tests
      -pre-compile-test-single:  called before javac compilation of single JUnit test
      -post-compile-test-single: called after javac compilation of single JUunit test
      -pre-jar:                  called before JAR building
      -post-jar:                 called after JAR building
      -post-clean:               called after cleaning build products

    (Targets beginning with '-' are not intended to be called on their own.)

    Example of inserting an obfuscator after compilation could look like this:

        <target name="-post-compile">
            <obfuscate>
                <fileset dir="${build.classes.dir}"/>
            </obfuscate>
        </target>

    For list of available properties check the imported 
    nbproject/build-impl.xml file. 


    Another way to customize the build is by overriding existing main targets.
    The targets of interest are: 

      -init-macrodef-javac:     defines macro for javac compilation
      -init-macrodef-junit:     defines macro for junit execution
      -init-macrodef-debug:     defines macro for class debugging
      -init-macrodef-java:      defines macro for class execution
      -do-jar-with-manifest:    JAR building (if you are using a manifest)
      -do-jar-without-manifest: JAR building (if you are not using a manifest)
      run:                      execution of project 
      -javadoc-build:           Javadoc generation
      test-report:              JUnit report generation

    An example of overriding the target for project execution could look like this:

        <target name="run" depends="Maimonides-impl.jar">
            <exec dir="bin" executable="launcher.exe">
                <arg file="${dist.jar}"/>
            </exec>
        </target>

    Notice that the overridden target depends on the jar target and not only on 
    the compile target as the regular run target does. Again, for a list of available 
    properties which you can use, check the target you are overriding in the
    nbproject/build-impl.xml file. 

    -->
    <property file="src/com/codeko/apps/maimonides/resources/MaimonidesApp.properties"/>
    <target name="-post-jar">
        <copy todir="${dist.dir}">
            <fileset dir="." includes="license.txt"/>
        </copy>
    </target>
    <target name="-post-compile">
        <exec executable="./rebuild-help-db.sh"/>
    </target>
    <target name="pre_installers" depends="clean,jar">
        <mkdir dir="install/dist/${Application.version}${Application.subversion}"/>
    </target>
    <target name="build_jnlp" description="Build and sign the jnlp enviroment" depends="pre_installers">
        <exec dir="install/jnlp/" executable="./build_jnlp.sh">
            <arg value="${Application.version}${Application.subversion}"/>
        </exec>
    </target>
    
    <target name="build_packages" description="Build compressed packages" depends="pre_installers">
        <zip    destfile="install/dist/${Application.version}${Application.subversion}/${Application.name}_${Application.version}${Application.subversion}.zip"
                basedir="dist/"
                excludes="readme.txt"
        />
        <tar destfile="install/dist/${Application.version}${Application.subversion}/${Application.name}_${Application.version}${Application.subversion}.tar.gz" compression="gzip">
            <zipfileset src="install/dist/${Application.version}${Application.subversion}/${Application.name}_${Application.version}${Application.subversion}.zip"/>
        </tar>
    </target>
    
    <target name="build_window_installers" description="Build windows installers and updater" depends="pre_installers">
        <exec dir="install/windows/" executable="./make_installer.sh">
            <arg value="${Application.version}${Application.subversion}"/>
        </exec>
    </target>
    
    
    <path id="ant_classpath">
        <fileset dir="lib/CopyLibs/" includes="*.jar"/>
    </path>
    <taskdef resource="ant_deb_task.properties" classpathref="ant_classpath"/>
    <target name="build_deb" description="Build deb binary package" depends="pre_installers">  
        <desktopentry
            toFile="dist/Maimonides.desktop"
            name="Maimonides"
            comment="Gestión de centros escolares compatible con Séneca."
            exec="'java'  -Xms128m -Xmx768m  -cp '.;./lib/*' -jar Maimonides.jar"
            path="/usr/share/${package.name}"
            icon="/usr/share/icons/hicolor/scalable/apps/${package.name}.svg"
            categories="Utility;Java"
        />
        <exec dir="install/deb/" executable="./copy_data.sh">
        </exec>
        <deb    todir="install/dist/${Application.version}${Application.subversion}" 
                package="${package.name}" 
                section="misc" 
                depends="sun-java6-jre, libreoffice-writer | openoffice.org-writer"
                homepage="${Application.homepage}"
                >
            <version upstream="${Application.version}${Application.subversion}"/>
            <maintainer name="Codeko" email="codeko@codeko.com"/>
            <description synopsis="Gestión para centros escolares compatible con Séneca">
                    Maimónides es una aplicación de gestión para centros escolares completamente integrada con Séneca (aunque no es necesario usar Séneca para poder usar Maimónides).
                    Permite la gestión de todos los datos de alumnos, profesores, horarios, faltas de asistencia, partes de convivencia, expulsiones, notificaciones a tutores etc...
                    Dispone de un sistema de digitalización de partes que permite introducir los partes de asistencia impresos directamente en el programa.
                    Todos los datos de Maimónides se pueden importar o exporta a Séneca de forma que no es necesario introducir los datos en dos sitios.
                    Visita la web de Maimónides para consultar más información, tutoriales, etc.
            </description>
            <tarfileset dir="install/deb/data" prefix="usr/share/${package.name}">
                <include name="lib/*.jar"/>
                <include name="*.jar"/>
                <include name="license.txt"/>
            </tarfileset>
            <tarfileset file="dist/Maimonides.desktop" prefix="usr/share/applications"/>
            <tarfileset file="install/deb/${package.name}.svg" prefix="/usr/share/icons/hicolor/scalable/apps"/>
        </deb>
    </target>
    <target name="all_installers" description="Build all installers" depends="build_jnlp,build_packages,build_window_installers,build_deb"/>  
</project>
