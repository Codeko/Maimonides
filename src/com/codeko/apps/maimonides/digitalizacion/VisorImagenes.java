/*
 * VisorImagenes.java
 *
 * Created on 28 de octubre de 2008, 13:07
 */
package com.codeko.apps.maimonides.digitalizacion;

import com.codeko.apps.maimonides.MaimonidesApp;
import com.codeko.util.Img;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Transparency;
import java.awt.image.BufferedImage;
import java.awt.print.PageFormat;
import java.awt.print.Printable;
import java.awt.print.PrinterException;
import java.awt.print.PrinterJob;
import javax.swing.ImageIcon;
import javax.swing.JFrame;

/**
 *
 * @author  Codeko
 */
public class VisorImagenes extends javax.swing.JPanel {

    BufferedImage imagen = null;
    BufferedImage imagenMostrada = null;
    double factorZoom = 1;

    /** Creates new form VisorImagenes */
    public VisorImagenes() {
        initComponents();
    }

    public VisorImagenes(Image img) {
        initComponents();
        setImagen(Img.toBufferedImage(img, Transparency.OPAQUE));
        Dimension d = new Dimension((int) (getImagenMostrada().getWidth() * 0.5), (int) (getImagenMostrada().getHeight() * 0.5));
        BufferedImage img2 = Img.getImagenEscalada(img, d, false);
        lImagen.setIcon(new ImageIcon(img2));
        setImagenMostrada(img2);
    }

    public BufferedImage getImagenMostrada() {
        return imagenMostrada;
    }

    public void setImagenMostrada(BufferedImage imagenMostrada) {
        this.imagenMostrada = imagenMostrada;
    }

    public BufferedImage getImagen() {
        return imagen;
    }

    public void setImagen(BufferedImage imagen) {
        this.imagen = imagen;
        if (imagen != null) {
            //lImagen.setIcon(new ImageIcon(imagen));
            setImagenMostrada(imagen);
            aplicarFactorZoom();
        } else {
            lImagen.setIcon(null);
            setImagenMostrada(null);
        }
    }

    public void ajustar() {
        if (getImagenMostrada() != null) {
            Dimension d = scroll.getSize();
            BufferedImage img = Img.getImagenEscalada(getImagen(), d, false);
            lImagen.setIcon(new ImageIcon(img));
            setImagenMostrada(img);
            factorZoom=d.getWidth()/getImagen().getWidth();
        }
    }

    public static JFrame mostrarImagen(Image imagen) {
        JFrame m = new JFrame();
        VisorImagenes vi = new VisorImagenes(imagen);
        m.add(vi);
        m.setName("Visor parte");
        m.setAlwaysOnTop(true);
        MaimonidesApp.getApplication().show(m);
        return m;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scroll = new javax.swing.JScrollPane();
        lImagen = new javax.swing.JLabel();
        bZoomIn = new javax.swing.JButton();
        bZoomOut = new javax.swing.JButton();
        bImprimir = new javax.swing.JButton();
        bAjustar = new javax.swing.JButton();
        bOriginal = new javax.swing.JButton();

        setName("Form"); // NOI18N
        addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                formAncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });

        scroll.setName("scroll"); // NOI18N

        lImagen.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(com.codeko.apps.maimonides.MaimonidesApp.class).getContext().getResourceMap(VisorImagenes.class);
        lImagen.setText(resourceMap.getString("lImagen.text")); // NOI18N
        lImagen.setName("lImagen"); // NOI18N
        scroll.setViewportView(lImagen);

        bZoomIn.setIcon(resourceMap.getIcon("bZoomIn.icon")); // NOI18N
        bZoomIn.setText(resourceMap.getString("bZoomIn.text")); // NOI18N
        bZoomIn.setToolTipText(resourceMap.getString("bZoomIn.toolTipText")); // NOI18N
        bZoomIn.setName("bZoomIn"); // NOI18N
        bZoomIn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bZoomInActionPerformed(evt);
            }
        });

        bZoomOut.setIcon(resourceMap.getIcon("bZoomOut.icon")); // NOI18N
        bZoomOut.setText(resourceMap.getString("bZoomOut.text")); // NOI18N
        bZoomOut.setToolTipText(resourceMap.getString("bZoomOut.toolTipText")); // NOI18N
        bZoomOut.setName("bZoomOut"); // NOI18N
        bZoomOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bZoomOutActionPerformed(evt);
            }
        });

        bImprimir.setIcon(resourceMap.getIcon("bImprimir.icon")); // NOI18N
        bImprimir.setText(resourceMap.getString("bImprimir.text")); // NOI18N
        bImprimir.setToolTipText(resourceMap.getString("bImprimir.toolTipText")); // NOI18N
        bImprimir.setName("bImprimir"); // NOI18N
        bImprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bImprimirActionPerformed(evt);
            }
        });

        bAjustar.setIcon(resourceMap.getIcon("bAjustar.icon")); // NOI18N
        bAjustar.setText(resourceMap.getString("bAjustar.text")); // NOI18N
        bAjustar.setToolTipText(resourceMap.getString("bAjustar.toolTipText")); // NOI18N
        bAjustar.setName("bAjustar"); // NOI18N
        bAjustar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bAjustarActionPerformed(evt);
            }
        });

        bOriginal.setIcon(resourceMap.getIcon("bOriginal.icon")); // NOI18N
        bOriginal.setText(resourceMap.getString("bOriginal.text")); // NOI18N
        bOriginal.setToolTipText(resourceMap.getString("bOriginal.toolTipText")); // NOI18N
        bOriginal.setName("bOriginal"); // NOI18N
        bOriginal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bOriginalActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(bZoomIn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bZoomOut)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bAjustar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bOriginal)
                .addGap(26, 26, 26)
                .addComponent(bImprimir)
                .addContainerGap())
            .addComponent(scroll, javax.swing.GroupLayout.DEFAULT_SIZE, 309, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(scroll, javax.swing.GroupLayout.DEFAULT_SIZE, 636, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(bImprimir)
                    .addComponent(bZoomIn)
                    .addComponent(bZoomOut)
                    .addComponent(bAjustar)
                    .addComponent(bOriginal))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

private void bZoomInActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bZoomInActionPerformed
    factorZoom += 0.1;
    aplicarFactorZoom();
}//GEN-LAST:event_bZoomInActionPerformed

private void bZoomOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bZoomOutActionPerformed
    factorZoom -= 0.1;
    if(factorZoom<0){
        factorZoom=0;
    }
    aplicarFactorZoom();
}//GEN-LAST:event_bZoomOutActionPerformed

    private void aplicarFactorZoom() {
        bZoomIn.setEnabled(factorZoom<2);
        bZoomOut.setEnabled(factorZoom>0);
        bOriginal.setEnabled(factorZoom!=1);
        if (factorZoom == 1) {
            lImagen.setIcon(new ImageIcon(getImagen()));
            setImagenMostrada(getImagen());
        } else if (factorZoom <= 0) {
            ajustar();
        } else {
            Dimension d = new Dimension((int) (getImagen().getWidth() * factorZoom), (int) (getImagen().getHeight() * factorZoom));
            BufferedImage img = Img.getImagenEscalada(getImagen(), d, false);
            lImagen.setIcon(new ImageIcon(img));
            setImagenMostrada(img);
        }
    }

private void bImprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bImprimirActionPerformed

    PrinterJob job = PrinterJob.getPrinterJob();
    job.setPrintable(new Printable() {

        @Override
        public int print(Graphics graphics, PageFormat pageFormat,
                int pageIndex) throws PrinterException {
            if (pageIndex > 0) {
                return NO_SUCH_PAGE;
            }
            Graphics2D g2d = (Graphics2D) graphics;
            g2d.translate(pageFormat.getImageableX(), pageFormat.getImageableY());
            g2d.drawImage(Img.getImagenEscalada(getImagen(), new Dimension((int) pageFormat.getImageableWidth(), (int) pageFormat.getImageableHeight())), 0, 0, null);
            return PAGE_EXISTS;
        }
    });
    boolean ok = job.printDialog();
    if (ok) {
        try {
            job.print();
        } catch (PrinterException ex) {
            ex.printStackTrace();
        }
    }
}//GEN-LAST:event_bImprimirActionPerformed

private void bAjustarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bAjustarActionPerformed
    ajustar();
}//GEN-LAST:event_bAjustarActionPerformed

private void bOriginalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bOriginalActionPerformed
    factorZoom = 1;
    aplicarFactorZoom();
}//GEN-LAST:event_bOriginalActionPerformed

private void formAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_formAncestorAdded
}//GEN-LAST:event_formAncestorAdded
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bAjustar;
    private javax.swing.JButton bImprimir;
    private javax.swing.JButton bOriginal;
    private javax.swing.JButton bZoomIn;
    private javax.swing.JButton bZoomOut;
    private javax.swing.JLabel lImagen;
    private javax.swing.JScrollPane scroll;
    // End of variables declaration//GEN-END:variables
}
