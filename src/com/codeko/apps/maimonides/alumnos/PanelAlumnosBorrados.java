/*
 * PanelAlumnosBorrados.java
 *
 * Created on 14-dic-2010, 19:31:42
 */
package com.codeko.apps.maimonides.alumnos;

import com.codeko.apps.maimonides.Conector;
import com.codeko.apps.maimonides.MaimonidesApp;
import com.codeko.apps.maimonides.MaimonidesUtil;
import com.codeko.apps.maimonides.elementos.Alumno;
import com.codeko.swing.CodekoTableModel;
import com.codeko.util.Obj;
import com.mysql.jdbc.PreparedStatement;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import org.jdesktop.application.Action;
import org.jdesktop.application.Task;

/**
 *
 * @author codeko
 */
public class PanelAlumnosBorrados extends javax.swing.JPanel {

    CodekoTableModel<Alumno> modelo = new CodekoTableModel<Alumno>(new Alumno());
    PanelAlumnosBorrados auto=this;
    /** Creates new form PanelAlumnosBorrados */
    public PanelAlumnosBorrados() {
        initComponents();
        tabla.getSelectionModel().addListSelectionListener(new ListSelectionListener() {

            @Override
            public void valueChanged(ListSelectionEvent e) {
                if (!e.getValueIsAdjusting()) {
                    int pos = tabla.getSelectedRow();
                    if (pos != -1) {
                        pos = tabla.convertRowIndexToModel(pos);
                        Alumno objeto = modelo.getElemento(pos);
                        setAlumnosSelected(objeto != null);
                    } else {
                        setAlumnosSelected(false);
                    }
                }
            }
        });
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        barraHerramientas = new javax.swing.JToolBar();
        bActualizar = new javax.swing.JButton();
        bRecuperar = new javax.swing.JButton();
        mainPanel = new javax.swing.JPanel();
        scrollTabla = new javax.swing.JScrollPane();
        tabla = new org.jdesktop.swingx.JXTable();

        setName("Form"); // NOI18N
        setLayout(new java.awt.BorderLayout());

        barraHerramientas.setRollover(true);
        barraHerramientas.setName("barraHerramientas"); // NOI18N

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(com.codeko.apps.maimonides.MaimonidesApp.class).getContext().getActionMap(PanelAlumnosBorrados.class, this);
        bActualizar.setAction(actionMap.get("cargarAlumnos")); // NOI18N
        bActualizar.setFocusable(false);
        bActualizar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bActualizar.setName("bActualizar"); // NOI18N
        bActualizar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        barraHerramientas.add(bActualizar);

        bRecuperar.setAction(actionMap.get("recuperarAlumnos")); // NOI18N
        bRecuperar.setFocusable(false);
        bRecuperar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bRecuperar.setName("bRecuperar"); // NOI18N
        bRecuperar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        barraHerramientas.add(bRecuperar);

        add(barraHerramientas, java.awt.BorderLayout.PAGE_START);

        mainPanel.setName("mainPanel"); // NOI18N
        mainPanel.setLayout(new java.awt.BorderLayout());

        scrollTabla.setName("scrollTabla"); // NOI18N

        tabla.setModel(modelo);
        tabla.setColumnControlVisible(true);
        tabla.setName("tabla"); // NOI18N
        scrollTabla.setViewportView(tabla);

        mainPanel.add(scrollTabla, java.awt.BorderLayout.CENTER);

        add(mainPanel, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    @Action(block = Task.BlockingScope.ACTION)
    public Task cargarAlumnos() {
        return new CargarAlumnosTask(org.jdesktop.application.Application.getInstance(com.codeko.apps.maimonides.MaimonidesApp.class));
    }

    private class CargarAlumnosTask extends org.jdesktop.application.Task<Object, Void> {

        CargarAlumnosTask(org.jdesktop.application.Application app) {
            super(app);
            modelo.vaciar();
        }

        @Override
        protected Object doInBackground() {
            try {

                PreparedStatement st = Conector.prepareSt("SELECT a.* FROM alumnos AS a JOIN unidades AS u ON a.unidad_id=u.id WHERE a.borrado=1 AND a.ano=? AND TRIM(a.numescolar)!='' ORDER BY u.posicion," + Alumno.getCampoOrdenNombre(""));
                st.setInt(1, MaimonidesApp.getApplication().getAnoEscolar().getId());
                ResultSet res = st.executeQuery();
                while (res.next()) {
                    Alumno a = new Alumno();
                    a.cargarDesdeResultSet(res);
                    a.addPropertyChangeListener(new PropertyChangeListener() {

                        @Override
                        public void propertyChange(PropertyChangeEvent evt) {
                            if ("mensajesUltimaOperacion".equals(evt.getPropertyName())) {
                                Alumno a = (Alumno) evt.getNewValue();
                                MaimonidesUtil.mostrarVentanaListaDatos("Modificación alumno", a.getMensajesUltimaOperacion());
                            }
                        }
                    });
                    modelo.addDato(a);
                }
                Obj.cerrar(st, res);
            } catch (Exception ex) {
                Logger.getLogger(PanelAlumnos.class.getName()).log(Level.SEVERE, "Error cargando lista de alumnos para año: " + MaimonidesApp.getApplication().getAnoEscolar(), ex);
            }
            return null;
        }

        @Override
        protected void succeeded(Object result) {
            tabla.packAll();
        }
    }

    @Action(block = Task.BlockingScope.ACTION, enabledProperty = "alumnosSelected")
    public Task recuperarAlumnos() {
        return new RecuperarAlumnosTask(org.jdesktop.application.Application.getInstance(com.codeko.apps.maimonides.MaimonidesApp.class));
    }

    private class RecuperarAlumnosTask extends org.jdesktop.application.Task<Object, Void> {

        ArrayList<Alumno> alumnos = new ArrayList<Alumno>();

        RecuperarAlumnosTask(org.jdesktop.application.Application app) {
            super(app);
            for (int r : tabla.getSelectedRows()) {
                Alumno a = modelo.getElemento(tabla.convertRowIndexToModel(r));
                alumnos.add(a);
            }
            int op = JOptionPane.showConfirmDialog(mainPanel, "¿Desea recuperar los alumnos seleccionados (" + alumnos.size() + ")?", "Recuperar alumnos", JOptionPane.OK_CANCEL_OPTION);
            if (op != JOptionPane.OK_OPTION) {
                cancel(true);
            }
        }

        @Override
        protected Object doInBackground() {
            setMessage("Recuperando alumnos...");
            setProgress(0, 0, alumnos.size());
            int count = 0;
            for (Alumno a : alumnos) {
                count++;
                setProgress(count, 0, alumnos.size());
                a.setBorrado(false);
                a.guardar();
            }
            MaimonidesUtil.ejecutarTask(auto, "cargarAlumnos");
            return null;
        }

        @Override
        protected void succeeded(Object result) {
            JOptionPane.showMessageDialog(mainPanel, "Alumnos recuperados correctamente.", "Recuperación finalizada", JOptionPane.INFORMATION_MESSAGE);
            setMessage("Alumnos recuperados correctamente.");
        }
    }
    private boolean alumnosSelected = false;

    public boolean isAlumnosSelected() {
        return alumnosSelected;
    }

    public void setAlumnosSelected(boolean b) {
        boolean old = isAlumnosSelected();
        this.alumnosSelected = b;
        firePropertyChange("alumnosSelected", old, isAlumnosSelected());
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bActualizar;
    private javax.swing.JButton bRecuperar;
    private javax.swing.JToolBar barraHerramientas;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JScrollPane scrollTabla;
    private org.jdesktop.swingx.JXTable tabla;
    // End of variables declaration//GEN-END:variables
}
