/*
 * PanelActualizacionSeneca.java
 *
 * Created on 6 de octubre de 2008, 10:14
 */
package com.codeko.apps.maimonides.importadores;

import com.codeko.apps.maimonides.IPanel;
import com.codeko.apps.maimonides.MaimonidesApp;
import com.codeko.apps.maimonides.elementos.Alumno;
import com.codeko.apps.maimonides.elementos.Materia;

import com.codeko.apps.maimonides.seneca.ClienteSeneca;
import com.codeko.apps.maimonides.seneca.GestorUsuarioClaveSeneca;
import com.codeko.util.Archivo;
import com.mysql.jdbc.PreparedStatement;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.File;

import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;
import javax.swing.tree.DefaultMutableTreeNode;
import org.jdesktop.application.Action;
import org.jdesktop.application.Task;

/**
 *
 * @author  Codeko
 */
//TODO Borrar
public class PanelActualizacionSeneca extends javax.swing.JPanel implements IPanel {

    /** Creates new form PanelActualizacionSeneca */
    public PanelActualizacionSeneca() {
        initComponents();
        setSenecaDisponible(false);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelActualizarMateriasYProfesores = new javax.swing.JPanel();
        lInfoMateriasProfesores = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        lInfoMatriculas4 = new javax.swing.JLabel();
        lInfoMaterias3 = new javax.swing.JLabel();
        bActualizarMatriculas1 = new javax.swing.JButton();

        setName("Form"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(com.codeko.apps.maimonides.MaimonidesApp.class).getContext().getResourceMap(PanelActualizacionSeneca.class);
        panelActualizarMateriasYProfesores.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("panelActualizarMateriasYProfesores.border.title"))); // NOI18N
        panelActualizarMateriasYProfesores.setName("panelActualizarMateriasYProfesores"); // NOI18N

        lInfoMateriasProfesores.setText(resourceMap.getString("lInfoMateriasProfesores.text")); // NOI18N
        lInfoMateriasProfesores.setName("lInfoMateriasProfesores"); // NOI18N

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(com.codeko.apps.maimonides.MaimonidesApp.class).getContext().getActionMap(PanelActualizacionSeneca.class, this);
        jButton2.setAction(actionMap.get("actualizarDesdeSeneca")); // NOI18N
        jButton2.setName("jButton2"); // NOI18N

        lInfoMatriculas4.setText(resourceMap.getString("lInfoMatriculas4.text")); // NOI18N
        lInfoMatriculas4.setName("lInfoMatriculas4"); // NOI18N

        lInfoMaterias3.setText(resourceMap.getString("lInfoMaterias3.text")); // NOI18N
        lInfoMaterias3.setName("lInfoMaterias3"); // NOI18N

        bActualizarMatriculas1.setAction(actionMap.get("actualizarMatriculas")); // NOI18N
        bActualizarMatriculas1.setName("bActualizarMatriculas1"); // NOI18N

        javax.swing.GroupLayout panelActualizarMateriasYProfesoresLayout = new javax.swing.GroupLayout(panelActualizarMateriasYProfesores);
        panelActualizarMateriasYProfesores.setLayout(panelActualizarMateriasYProfesoresLayout);
        panelActualizarMateriasYProfesoresLayout.setHorizontalGroup(
            panelActualizarMateriasYProfesoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelActualizarMateriasYProfesoresLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelActualizarMateriasYProfesoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lInfoMateriasProfesores, javax.swing.GroupLayout.DEFAULT_SIZE, 765, Short.MAX_VALUE)
                    .addComponent(lInfoMatriculas4, javax.swing.GroupLayout.DEFAULT_SIZE, 765, Short.MAX_VALUE)
                    .addGroup(panelActualizarMateriasYProfesoresLayout.createSequentialGroup()
                        .addComponent(bActualizarMatriculas1)
                        .addGap(18, 18, 18)
                        .addComponent(jButton2))
                    .addComponent(lInfoMaterias3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        panelActualizarMateriasYProfesoresLayout.setVerticalGroup(
            panelActualizarMateriasYProfesoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelActualizarMateriasYProfesoresLayout.createSequentialGroup()
                .addComponent(lInfoMateriasProfesores)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lInfoMatriculas4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lInfoMaterias3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 17, Short.MAX_VALUE)
                .addGroup(panelActualizarMateriasYProfesoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bActualizarMatriculas1)
                    .addComponent(jButton2)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelActualizarMateriasYProfesores, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelActualizarMateriasYProfesores, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(521, 521, 521))
        );
    }// </editor-fold>//GEN-END:initComponents

    @Action(block = Task.BlockingScope.APPLICATION)
    public Task actualizarMatriculas() {
        return new ActualizarMatriculasTask(org.jdesktop.application.Application.getInstance(com.codeko.apps.maimonides.MaimonidesApp.class));
    }

    private class ActualizarMatriculasTask extends org.jdesktop.application.Task<Boolean, Void> {

        ArrayList<File> archivos = null;
        ArrayList<PropertyChangeEvent> nohayHorarios = new ArrayList<PropertyChangeEvent>();
        ArrayList<PropertyChangeEvent> cambioUnidad = new ArrayList<PropertyChangeEvent>();
        ArrayList<String> alumnoNoEncontrados = new ArrayList<String>();

        ActualizarMatriculasTask(org.jdesktop.application.Application app) {
            super(app);
            JFileChooser jfc = new JFileChooser(MaimonidesApp.getApplication().getUltimoArchivo());
            jfc.setFileFilter(new FileFilter() {

                @Override
                public boolean accept(File f) {
                    return f.isDirectory() || f.getName().toLowerCase().endsWith(".csv");
                }

                @Override
                public String getDescription() {
                    return "Archivos de matrículas de Séneca (*.csv)";
                }
            });
            jfc.setMultiSelectionEnabled(true);
            int res = jfc.showOpenDialog(MaimonidesApp.getMaimonidesView().getFrame());
            if (res == JFileChooser.APPROVE_OPTION) {
                archivos = new ArrayList<File>();
                archivos.addAll(Arrays.asList(jfc.getSelectedFiles()));
                if (archivos.size() > 1) {
                    MaimonidesApp.getApplication().setUltimoArchivo(archivos.get(0).getParentFile());
                } else {
                    MaimonidesApp.getApplication().setUltimoArchivo(archivos.get(0));
                }
            } else {
                cancel(true);
            }
        }

        @Override
        protected Boolean doInBackground() {
            Boolean ret = false;
            if (archivos != null) {
                ImportadorArchivosMatriculas imp = new ImportadorArchivosMatriculas(MaimonidesApp.getApplication().getAnoEscolar(), archivos);
                imp.addPropertyChangeListener(new PropertyChangeListener() {

                    @Override
                    public void propertyChange(PropertyChangeEvent evt) {
                        //System.out.println(evt.getPropertyName() + ":" + evt.getOldValue() + ":" + evt.getNewValue());
                        String name = evt.getPropertyName();
                        //TODO Eliminar todos los setMensaje
                        if ("setMensaje".equals(name)) {
                            name = "message";
                        } else if ("noHayHorarios".equals(name)) {
                            nohayHorarios.add(evt);
                        } else if ("cambioUnidad".equals(name)) {
                            cambioUnidad.add(evt);
                        }
                        firePropertyChange(name, evt.getOldValue(), evt.getNewValue());
                    }
                });
                ret = imp.importarMatriculas();
                alumnoNoEncontrados.addAll(imp.getAlumnosNoEncontrados());
            }
            return ret;
        }

        @Override
        protected void succeeded(Boolean result) {
            if (result) {
                boolean advertencias = false;
                //TODO Esto debe ser una lista o un arbol o algo con scroll
                StringBuilder sb = new StringBuilder();
                if (alumnoNoEncontrados.size() > 0) {
                    advertencias = true;
                    sb.append("\n -Alumnos en el fichero de matrículas que no existen en la gestión:");
                    for (String s : alumnoNoEncontrados) {
                        sb.append("\n     ");
                        sb.append(s);
                    }
                }

                if (nohayHorarios.size() > 0) {
                    advertencias = true;
                    sb.append("\n -Existen matriculaciones para asignaturas sin horario asignado:");

                    ArrayList<String> lineas = new ArrayList<String>();
                    for (PropertyChangeEvent evt : nohayHorarios) {
                        Alumno a = (Alumno) evt.getOldValue();
                        Materia m = (Materia) evt.getNewValue();
                        String txt = "\n     Unidad: " + a.getUnidad() + "   Materia: " + m;
                        if (!lineas.contains(txt)) {
                            lineas.add(txt);
                            sb.append(txt);
                        }
                    }
                    lineas = null;
                }

                if (cambioUnidad.size() > 0) {
                    advertencias = true;
                    sb.append("\n -Se le ha cambiado la unidad a los siguientes alumnos:");
                    for (PropertyChangeEvent evt : cambioUnidad) {
                        sb.append("\n     Alumno: ");
                        sb.append(evt.getOldValue());
                        sb.append(". Nueva unidad: ").append(evt.getNewValue());
                    }
                }

                String extra = "";
                if (advertencias) {
                    extra = "\nSin embargo se han encontrado situaciones que quizá sean de su interés:\n" + sb.toString();
                }
                JOptionPane.showMessageDialog(MaimonidesApp.getApplication().getMainFrame(), "Actualización realizada con éxito." + extra, "Actualizar matrículas", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(MaimonidesApp.getApplication().getMainFrame(), "Error actualizando matrículas", "Actualizar matrículas", JOptionPane.INFORMATION_MESSAGE);
            }

        }
    }
    private boolean senecaDisponible = false;

    public boolean isSenecaDisponible() {
        return senecaDisponible;
    }

    public final void setSenecaDisponible(boolean b) {
        boolean old = isSenecaDisponible();
        this.senecaDisponible = b;
        firePropertyChange("senecaDisponible", old, isSenecaDisponible());
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bActualizarMatriculas1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel lInfoMaterias3;
    private javax.swing.JLabel lInfoMateriasProfesores;
    private javax.swing.JLabel lInfoMatriculas4;
    private javax.swing.JPanel panelActualizarMateriasYProfesores;
    // End of variables declaration//GEN-END:variables

    @Override
    public boolean puedoSusituir() {
        return true;
    }

    @Action(block = Task.BlockingScope.APPLICATION, enabledProperty = "senecaDisponible")
    public Task actualizarDesdeSeneca() {
        return new ActualizarDesdeSenecaTask(org.jdesktop.application.Application.getInstance(com.codeko.apps.maimonides.MaimonidesApp.class));
    }

    private class ActualizarDesdeSenecaTask extends org.jdesktop.application.Task<Object, Void> {

        //Curso curso = null;
        ClienteSeneca cli = null;

        ActualizarDesdeSenecaTask(org.jdesktop.application.Application app) {
            super(app);
            //Vector cursos = Curso.getCursos();
//            Object ret = JOptionPane.showInputDialog(MaimonidesApp.getApplication().getMainFrame(), "¿De que curso desea actualizar las matrículas?", "Actualizar matrículas", JOptionPane.QUESTION_MESSAGE, null, cursos.toArray(), cursos.firstElement());
//            if (ret instanceof Curso) {
//                curso = (Curso) ret;
//            } else if (ret != null) {
//            } else {
//                cancel(false);
//            }
            if (!GestorUsuarioClaveSeneca.getGestor().pedirUsuarioClave()) {
                cancel(false);
            } else {
                cli = new ClienteSeneca(GestorUsuarioClaveSeneca.getGestor().getUsuario(), GestorUsuarioClaveSeneca.getGestor().getClave());
                cli.setDebugMode(MaimonidesApp.isDebug());
            }
        }

        @Override
        protected Object doInBackground() {
            if (!isCancelled()) {
                cli.addPropertyChangeListener(new PropertyChangeListener() {

                    @Override
                    public void propertyChange(PropertyChangeEvent evt) {
                        firePropertyChange(evt.getPropertyName(), evt.getOldValue(), evt.getNewValue());
                    }
                });
//                if (curso != null) {
//                    cli.getArchivoMatriculasAlumnado(curso);
//                }
            }
            return null;  // return your result
        }

        @Override
        protected void succeeded(Object result) {
        }
    }

    @Action(block = Task.BlockingScope.APPLICATION)
    public Task actualizarAlumnosDesdeFichero() {
        return new ActualizarAlumnosDesdeFicheroTask(org.jdesktop.application.Application.getInstance(com.codeko.apps.maimonides.MaimonidesApp.class));
    }

    private class ActualizarAlumnosDesdeFicheroTask extends org.jdesktop.application.Task<Boolean, Void> {

        ArrayList<File> archivos = null;
        File zip = null;
        int alumnosNuevos = 0;
        int alumnosBorrados = 0;
        boolean borrarAlumnos = false;
        //TODO Poder actualizar con ficheros de unas pocas unidades no de todas

        ActualizarAlumnosDesdeFicheroTask(org.jdesktop.application.Application app) {
            super(app);
            JFileChooser jfc = new JFileChooser(MaimonidesApp.getApplication().getUltimoArchivo());
            jfc.setFileFilter(new FileFilter() {

                @Override
                public boolean accept(File f) {
                    return f.isDirectory() || f.getName().toLowerCase().endsWith(".zip");
                }

                @Override
                public String getDescription() {
                    return "Archivos de faltas de Séneca (*.zip)";
                }
            });
            jfc.setMultiSelectionEnabled(false);
            int res = jfc.showOpenDialog(MaimonidesApp.getMaimonidesView().getFrame());
            if (res == JFileChooser.APPROVE_OPTION) {
                zip = jfc.getSelectedFile();
                MaimonidesApp.getApplication().setUltimoArchivo(jfc.getSelectedFile());
            } else {
                cancel(true);
            }
            // borrarAlumnos = cbEliminar.isSelected();
        }

        @Override
        protected Boolean doInBackground() {
            Boolean ret = false;
            archivos = new ArrayList<File>();
            File tmpDir = new File(System.getProperty("java.io.tmpdir"), "faltas");
            archivos.addAll(Archivo.descomprimirZip(zip, tmpDir, true));
            if (archivos.size() > 0) {
                if (borrarAlumnos) {
                    try {
                        //Creamos una table con los alumnos
                        PreparedStatement stBorrar = (PreparedStatement) MaimonidesApp.getApplication().getConector().getConexion().prepareStatement("DROP TEMPORARY TABLE IF EXISTS tmp_alumnos ");
                        stBorrar.executeUpdate();
                        stBorrar.close();
                        PreparedStatement st = (PreparedStatement) MaimonidesApp.getApplication().getConector().getConexion().prepareStatement("CREATE TEMPORARY TABLE tmp_alumnos AS select id,0 AS existe FROM alumnos WHERE ano=?");
                        st.setInt(1, MaimonidesApp.getApplication().getAnoEscolar().getId());
                        st.executeUpdate();
                        st.close();
                    } catch (SQLException ex) {
                        Logger.getLogger(PanelActualizacionSeneca.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                ImportadorArchivoAlumnos imp = new ImportadorArchivoAlumnos(MaimonidesApp.getApplication().getAnoEscolar(), archivos);
                imp.addPropertyChangeListener(new PropertyChangeListener() {

                    @Override
                    public void propertyChange(PropertyChangeEvent evt) {
                        //System.out.println(evt.getPropertyName() + ":" + evt.getOldValue() + ":" + evt.getNewValue());
                        String name = evt.getPropertyName();
                        //TODO Eliminar todos los setMensaje
                        if ("setMensaje".equals(name)) {
                            name = "message";
                        } else if ("alumnoNuevo".equals(name)) {
                            alumnosNuevos++;
                        } else if ("alumnoExiste".equals(name)) {
                            if (borrarAlumnos) {
                                try {
                                    PreparedStatement st = (PreparedStatement) MaimonidesApp.getApplication().getConector().getConexion().prepareStatement("UPDATE tmp_alumnos SET existe=1 WHERE id=?");
                                    st.setInt(1, ((Alumno) evt.getNewValue()).getId());
                                    st.executeUpdate();
                                    st.close();
                                } catch (SQLException ex) {
                                    Logger.getLogger(PanelActualizacionSeneca.class.getName()).log(Level.SEVERE, null, ex);
                                }
                            }
                        }
                        firePropertyChange(name, evt.getOldValue(), evt.getNewValue());
                    }
                });
                ret = imp.importarAlumnos();
                if (borrarAlumnos && ret) {
                    try {
                        PreparedStatement st = (PreparedStatement) MaimonidesApp.getApplication().getConector().getConexion().prepareStatement("DELETE alumnos FROM alumnos JOIN tmp_alumnos ON alumnos.id=tmp_alumnos.id WHERE tmp_alumnos.existe=0 ");
                        alumnosBorrados = st.executeUpdate();
                        st.close();
                    } catch (SQLException ex) {
                        Logger.getLogger(PanelActualizacionSeneca.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
            return ret;
        }

        @Override
        protected void succeeded(Boolean result) {
            if (result) {
                JOptionPane.showMessageDialog(MaimonidesApp.getApplication().getMainFrame(), "Actualización realizada con éxito.\nSe han añadido " + alumnosNuevos + " alumnos." + (borrarAlumnos ? "\nSe han borrado " + alumnosBorrados + " alumnos." : ""), "Actualizar alumnos", JOptionPane.INFORMATION_MESSAGE);
                //TODO Mostrar informe de alumnos añadidos y borrados
            } else {
                JOptionPane.showMessageDialog(MaimonidesApp.getApplication().getMainFrame(), "Error actualizando alumnos", "Actualizar alumnos", JOptionPane.INFORMATION_MESSAGE);
            }

        }
    }

    @Action(block = Task.BlockingScope.APPLICATION)
    public Task actualizarHorw() {
        return new ActualizarHorwTask(org.jdesktop.application.Application.getInstance(com.codeko.apps.maimonides.MaimonidesApp.class));
    }

    private class ActualizarHorwTask extends org.jdesktop.application.Task<Boolean, Void> {

        File archivoHorw = null;
        boolean hayProblemas = false;
        DefaultMutableTreeNode top = new DefaultMutableTreeNode("Problemas");

        ActualizarHorwTask(org.jdesktop.application.Application app) {
            super(app);
            JFileChooser jfc = new JFileChooser(MaimonidesApp.getApplication().getUltimoArchivo());
            jfc.setFileFilter(new FileFilter() {

                @Override
                public boolean accept(File f) {
                    return f.isDirectory() || f.getName().toLowerCase().endsWith(".txt");
                }

                @Override
                public String getDescription() {
                    return "Archivo de horarios de Horw (*.txt)";
                }
            });
            jfc.setMultiSelectionEnabled(false);
            int res = jfc.showOpenDialog(MaimonidesApp.getMaimonidesView().getFrame());
            if (res == JFileChooser.APPROVE_OPTION) {
                archivoHorw = jfc.getSelectedFile();
                MaimonidesApp.getApplication().setUltimoArchivo(jfc.getSelectedFile());
            } else {
                cancel(true);
            }
        }

        @Override
        protected Boolean doInBackground() {
            boolean ret = false;
            if (archivoHorw != null) {
                try {
                    //TODO Esto mejor moverlo a la clase horario
                    //Primero hay que eliminar todos los horarios no asociados a un parte de asistencia.
                    String sqlBorrar = "DELETE horarios FROM horarios "
                            + " LEFT JOIN partes_alumnos ON partes_alumnos.horario_id=horarios.id "
                            + " LEFT JOIN partes_horarios ON partes_horarios.horario_id=horarios.id "
                            + " WHERE partes_alumnos.parte_id IS NULL AND partes_horarios.parte_id IS NULL "
                            + " AND horarios.ano=? ";
                    PreparedStatement stBorrar = (PreparedStatement) MaimonidesApp.getApplication().getConector().getConexion().prepareStatement(sqlBorrar);
                    stBorrar.setInt(1, MaimonidesApp.getApplication().getAnoEscolar().getId());
                    stBorrar.executeUpdate();
                    stBorrar.close();
                    //El resto los marcamos como borrados, no se usarán en ningún sitio pero permiten mantener los partes anteriores
                    PreparedStatement st = (PreparedStatement) MaimonidesApp.getApplication().getConector().getConexion().prepareStatement("UPDATE horarios SET fborrado=NOW() WHERE ano=? ");
                    st.setInt(1, MaimonidesApp.getApplication().getAnoEscolar().getId());
                    st.executeUpdate();
                    st.close();
                    ImportadorHorw horw = new ImportadorHorw(MaimonidesApp.getApplication().getAnoEscolar(), archivoHorw);
                    horw.addPropertyChangeListener(new PropertyChangeListener() {

                        @Override
                        public void propertyChange(PropertyChangeEvent evt) {
                            //System.out.println(evt.getPropertyName() + ":" + evt.getOldValue() + ":" + evt.getNewValue());
                            String name = evt.getPropertyName();
                            //TODO Eliminar todos los setMensaje
                            if ("setMensaje".equals(name)) {
                                name = "message";
                            }
                            firePropertyChange(name, evt.getOldValue(), evt.getNewValue());
                        }
                    });
                    ret = horw.importarHorarios();
                    //TODO Esto no debería estar por duplicado

                    if (ret) {
                        if (horw.getAsignaturasNoExistentes().size() > 0) {
                            hayProblemas = true;
                            DefaultMutableTreeNode nodo = new DefaultMutableTreeNode("Las siguientes asignaturas no existen en Séneca y sí en Horw");
                            for (String a : horw.getAsignaturasNoExistentes()) {
                                DefaultMutableTreeNode n = new DefaultMutableTreeNode(a);
                                nodo.add(n);
                            }
                            top.add(nodo);
                        }
                        if (horw.getDependenciasNoExistentes().size() > 0) {
                            hayProblemas = true;
                            DefaultMutableTreeNode nodo = new DefaultMutableTreeNode("Las siguientes dependencias (Aulas) no existen en Séneca y sí en Horw");
                            for (String a : horw.getDependenciasNoExistentes()) {
                                DefaultMutableTreeNode n = new DefaultMutableTreeNode(a);
                                nodo.add(n);
                            }
                            top.add(nodo);
                        }
                        if (horw.getUnidadesNoExistentes().size() > 0) {
                            hayProblemas = true;
                            DefaultMutableTreeNode nodo = new DefaultMutableTreeNode("Las siguientes unidades (Curso+Grupo) no existen en Séneca y sí en Horw");
                            for (String a : horw.getUnidadesNoExistentes()) {
                                DefaultMutableTreeNode n = new DefaultMutableTreeNode(a);
                                nodo.add(n);
                            }
                            top.add(nodo);
                        }
                        if (horw.getProfesoresNoExistentes().size() > 0) {
                            hayProblemas = true;
                            DefaultMutableTreeNode nodo = new DefaultMutableTreeNode("Los siguientes profesores no existen en Séneca y sí en Horw");
                            for (String a : horw.getProfesoresNoExistentes()) {
                                DefaultMutableTreeNode n = new DefaultMutableTreeNode(a);
                                nodo.add(n);
                            }
                            top.add(nodo);
                        }

                        if (horw.getAsignaturasRepetidas().size() > 0) {
                            hayProblemas = true;
                            DefaultMutableTreeNode nodo = new DefaultMutableTreeNode("Las siguientes asignaturas existen duplicadas (Igual nombre y curso) por lo que no se puede determinar cual es la correcta.");
                            for (String a : horw.getAsignaturasRepetidas()) {
                                DefaultMutableTreeNode n = new DefaultMutableTreeNode(a);
                                nodo.add(n);
                            }
                            top.add(nodo);
                        }
                        if (horw.getDependenciasRepetidas().size() > 0) {
                            hayProblemas = true;
                            DefaultMutableTreeNode nodo = new DefaultMutableTreeNode("Las siguientes dependencias existen duplicadas (Igual nombre) por lo que no se puede determinar cual es la correcta.");
                            for (String a : horw.getDependenciasRepetidas()) {
                                DefaultMutableTreeNode n = new DefaultMutableTreeNode(a);
                                nodo.add(n);
                            }
                            top.add(nodo);
                        }
                        if (horw.getUnidadesRepetidas().size() > 0) {
                            hayProblemas = true;
                            DefaultMutableTreeNode nodo = new DefaultMutableTreeNode("Las siguientes unidades existen duplicadas (Igual nombre y curso) por lo que no se puede determinar cual es la correcta.");
                            for (String a : horw.getUnidadesRepetidas()) {
                                DefaultMutableTreeNode n = new DefaultMutableTreeNode(a);
                                nodo.add(n);
                            }
                            top.add(nodo);
                        }
                        if (horw.getProfesoresRepetidos().size() > 0) {
                            hayProblemas = true;
                            DefaultMutableTreeNode nodo = new DefaultMutableTreeNode("Los siguientes profesores existen duplicados (Igual nombre y apellidos) por lo que no se puede determinar cual es la correcta.");
                            for (String a : horw.getProfesoresRepetidos()) {
                                DefaultMutableTreeNode n = new DefaultMutableTreeNode(a);
                                nodo.add(n);
                            }
                            top.add(nodo);
                        }

                    }
                } catch (SQLException ex) {
                    Logger.getLogger(PanelActualizacionSeneca.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            return ret;  // return your result
        }
        //TODO Admitir rollback

        @Override
        protected void succeeded(Boolean result) {
            if (result) {
                if (!hayProblemas) {
                    JOptionPane.showMessageDialog(MaimonidesApp.getApplication().getMainFrame(), "Actualización realizada con éxito.", "Actualizar horarios", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    PanelArbolErrores arbol = new PanelArbolErrores(top, "Existen advertencias en la importación de horarios. Por favor reviselas:");
                    JOptionPane.showMessageDialog(MaimonidesApp.getMaimonidesView().getFrame(), arbol, "Advertencias en la importación", JOptionPane.WARNING_MESSAGE);
                }

            } else {
                JOptionPane.showMessageDialog(MaimonidesApp.getApplication().getMainFrame(), "Error actualizando horarios", "Actualizar horarios", JOptionPane.INFORMATION_MESSAGE);
            }
        }
    }

    @Action(block = Task.BlockingScope.APPLICATION)
    public Task actualizarAlumnosExtendido() {
        return new ActualizarAlumnosExtendidoTask(org.jdesktop.application.Application.getInstance(com.codeko.apps.maimonides.MaimonidesApp.class));
    }

    private class ActualizarAlumnosExtendidoTask extends org.jdesktop.application.Task<Boolean, Void> {

        File archivo = null;
        ImportadorListadoExtendidoAlumnos imp = null;
        ArrayList<Alumno> borrados = new ArrayList<Alumno>();
        ArrayList<Alumno> nuevos = new ArrayList<Alumno>();
        ArrayList<ArrayList<Object>> errores = new ArrayList<ArrayList<Object>>();
        int guardados = 0;
        int procesados = 0;
        String error = "";

        ActualizarAlumnosExtendidoTask(org.jdesktop.application.Application app) {
            super(app);
            JFileChooser jfc = new JFileChooser(MaimonidesApp.getApplication().getUltimoArchivo());
            jfc.setFileFilter(new FileFilter() {

                @Override
                public boolean accept(File f) {
                    return f.isDirectory() || f.getName().toLowerCase().endsWith(".xls");
                }

                @Override
                public String getDescription() {
                    return "Listado de alumnos de Séneca (*.xls)";
                }
            });
            jfc.setMultiSelectionEnabled(false);
            int res = jfc.showOpenDialog(MaimonidesApp.getMaimonidesView().getFrame());
            if (res == JFileChooser.APPROVE_OPTION) {
                archivo = jfc.getSelectedFile();
                MaimonidesApp.getApplication().setUltimoArchivo(jfc.getSelectedFile());
            } else {
                cancel(true);
            }
        }

        public void canceled() {
            if (imp != null) {
                imp.setCancelado(true);
            }
        }

        @Override
        protected Boolean doInBackground() {
            boolean ret = false;
            if (archivo != null) {
                imp = new ImportadorListadoExtendidoAlumnos(MaimonidesApp.getApplication().getAnoEscolar(), archivo);
                imp.addPropertyChangeListener(new PropertyChangeListener() {

                    @Override
                    public void propertyChange(PropertyChangeEvent evt) {
                        String name = evt.getPropertyName();
                        if ("borrarAlumno".equals(evt.getPropertyName())) {
                            borrados.add((Alumno) evt.getNewValue());
                        } else if ("nuevoAlumno".equals(evt.getPropertyName())) {
                            nuevos.add((Alumno) evt.getNewValue());
                        } else if ("errorCurso".equals(evt.getPropertyName())) {
                            Alumno a = (Alumno) evt.getNewValue();
                            ArrayList<Object> er = new ArrayList<Object>();
                            er.add(a);
                            er.add(a.getUnidad());
                            er.add("No se ha encontrado el curso '" + evt.getOldValue() + "' se ha asignado:" + a.getObjetoCurso());
                            errores.add(er);
                        } else if ("errorUnidad".equals(evt.getPropertyName())) {
                            Alumno a = (Alumno) evt.getNewValue();
                            ArrayList<Object> er = new ArrayList<Object>();
                            er.add(a);
                            er.add(a.getUnidad());
                            er.add("No se ha encontrado la unidad '" + evt.getOldValue() + "'");
                            errores.add(er);
                        } else if ("errorGuardando".equals(evt.getPropertyName())) {
                            Alumno a = (Alumno) evt.getNewValue();
                            ArrayList<Object> er = new ArrayList<Object>();
                            er.add(a);
                            er.add(a.getUnidad());
                            er.add("No se han podidos guardar los datos del alumno.");
                            errores.add(er);
                        } else if ("guardado".equals(evt.getPropertyName())) {
                            guardados++;
                        } else if ("procesado".equals(evt.getPropertyName())) {
                            procesados++;
                        } else if ("errorGeneral".equals(evt.getPropertyName())) {
                            error = evt.getNewValue().toString();
                        }
                        firePropertyChange(name, evt.getOldValue(), evt.getNewValue());
                    }
                });
                ret = imp.importar();
            }
            return ret;  // return your result
        }

        @Override
        protected void succeeded(Boolean result) {
            if (result) {
                JOptionPane.showMessageDialog(MaimonidesApp.getApplication().getMainFrame(), new PanelInfoImportacionAlumnos(borrados, nuevos, errores, procesados, guardados), "Actualización realizada con éxito.", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(MaimonidesApp.getApplication().getMainFrame(), "Error actualizando alumnos:\n" + error, "Error actualizando alumnos", JOptionPane.ERROR_MESSAGE);
            }
        }
    }
}
