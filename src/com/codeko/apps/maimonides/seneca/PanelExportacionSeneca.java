/**
 *  Maimónides, gestión para centros escolares.
 *  Copyright Codeko and individual contributors
 *  as indicated by the @author tags.
 * 
 *  This is free software; you can redistribute it and/or modify it
 *  under the terms of the GNU General Public License as
 *  published by the Free Software Foundation; either version 2 of
 *  the License, or (at your option) any later version.
 * 
 *  This software is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 *  General Public License for more details.
 * 
 *  You should have received a copy of the GNU General Public
 *  License along with this software; if not, write to the Free
 *  Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 *  02110-1301 USA, or see the FSF site: http://www.fsf.org.
 *  
 *  For more information:
 *  maimonides@codeko.com
 *  http://codeko.com/maimonides
**/


/*
 * PanelExportacionSeneca.java
 *
 * Created on 30 de octubre de 2008, 17:36
 */
package com.codeko.apps.maimonides.seneca;

import com.codeko.apps.maimonides.IPanel;
import com.codeko.apps.maimonides.MaimonidesApp;
import com.codeko.apps.maimonides.alumnos.PanelAlumnos;
import com.codeko.apps.maimonides.seneca.operaciones.envioFicherosFaltas.ExportarFaltasSenecaTask;
import com.codeko.apps.maimonides.web.EnviosWeb;
import com.codeko.apps.maimonides.web.FaltaWeb;
import com.codeko.util.Fechas;
import com.codeko.util.Obj;
import com.codeko.util.Str;
import com.mysql.jdbc.PreparedStatement;
import com.mysql.jdbc.Statement;
import java.awt.BorderLayout;
import java.awt.Component;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.SwingUtilities;
import org.jdesktop.application.Action;
import org.jdesktop.application.Task;
import org.jdesktop.application.TaskEvent;
import org.jdesktop.application.TaskListener;

/**
 *
 * @author  Codeko
 */
public class PanelExportacionSeneca extends javax.swing.JPanel implements IPanel {

    /** Creates new form PanelExportacionSeneca */
    public PanelExportacionSeneca() {
        initComponents();
        pInfo.add(new PanelInfoSeneca(), BorderLayout.CENTER);
        setHayEnviosWeb(EnviosWeb.hayEnviosWeb());
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bExportaSeneca = new javax.swing.JButton();
        jXHeader1 = new org.jdesktop.swingx.JXHeader();
        lIcoSeneca = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        pInfo = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        bManual = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        bEnviarWeb = new javax.swing.JButton();

        setName("maimonides.paneles.faltas.exportar_faltas"); // NOI18N

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(com.codeko.apps.maimonides.MaimonidesApp.class).getContext().getActionMap(PanelExportacionSeneca.class, this);
        bExportaSeneca.setAction(actionMap.get("exportarFaltasSeneca")); // NOI18N
        bExportaSeneca.setName("bExportaSeneca"); // NOI18N
        bExportaSeneca.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bExportaSenecaMouseClicked(evt);
            }
        });

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(com.codeko.apps.maimonides.MaimonidesApp.class).getContext().getResourceMap(PanelExportacionSeneca.class);
        jXHeader1.setDescription(resourceMap.getString("jXHeader1.description")); // NOI18N
        jXHeader1.setTitle(resourceMap.getString("jXHeader1.title")); // NOI18N
        jXHeader1.setName("jXHeader1"); // NOI18N

        lIcoSeneca.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lIcoSeneca.setIcon(resourceMap.getIcon("lIcoSeneca.icon")); // NOI18N
        lIcoSeneca.setText(resourceMap.getString("lIcoSeneca.text")); // NOI18N
        lIcoSeneca.setName("lIcoSeneca"); // NOI18N

        jScrollPane1.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("jScrollPane1.border.title"))); // NOI18N
        jScrollPane1.setName("jScrollPane1"); // NOI18N

        pInfo.setName("pInfo"); // NOI18N
        pInfo.setLayout(new java.awt.BorderLayout());
        jScrollPane1.setViewportView(pInfo);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("jPanel1.border.title"))); // NOI18N
        jPanel1.setName("jPanel1"); // NOI18N

        bManual.setAction(actionMap.get("generarFicheros")); // NOI18N
        bManual.setName("bManual"); // NOI18N

        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        jLabel1.setName("jLabel1"); // NOI18N

        bEnviarWeb.setAction(actionMap.get("enviarWeb")); // NOI18N
        bEnviarWeb.setName("bEnviarWeb"); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 549, Short.MAX_VALUE)
                    .addComponent(bManual, javax.swing.GroupLayout.DEFAULT_SIZE, 549, Short.MAX_VALUE)
                    .addComponent(bEnviarWeb, javax.swing.GroupLayout.DEFAULT_SIZE, 549, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bManual)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bEnviarWeb)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 585, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(bExportaSeneca, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jXHeader1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lIcoSeneca, javax.swing.GroupLayout.PREFERRED_SIZE, 298, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jXHeader1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bExportaSeneca, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lIcoSeneca))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void bExportaSenecaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bExportaSenecaMouseClicked
        if (SwingUtilities.isRightMouseButton(evt)) {
            JPopupMenu menu = new JPopupMenu("Herramientas");
            JMenuItem mLimpiar = new JMenuItem(MaimonidesApp.getApplication().getContext().getActionMap(this).get("limpiarInfoEnviosSeneca"));
            menu.add(mLimpiar);
            menu.show((Component) evt.getSource(), evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_bExportaSenecaMouseClicked
    @SuppressWarnings("unchecked")
    @Action(block = Task.BlockingScope.WINDOW)
    public Task exportarFaltasSeneca() {
        Task t = new ExportarFaltasSenecaTask(MaimonidesApp.getApplication(), false);
        t.addTaskListener(new TaskListener() {

            @Override
            public void doInBackground(TaskEvent event) {
            }

            @Override
            public void process(TaskEvent event) {
            }

            @Override
            public void succeeded(TaskEvent event) {
            }

            @Override
            public void failed(TaskEvent event) {
            }

            @Override
            public void cancelled(TaskEvent event) {
            }

            @Override
            public void interrupted(TaskEvent event) {
            }

            @Override
            public void finished(TaskEvent event) {
                pInfo.removeAll();
                pInfo.add(new PanelInfoSeneca(), BorderLayout.CENTER);
            }
        });
        return t;
    }

    @Override
    public boolean puedoSusituir() {
        return true;
    }

    @SuppressWarnings("unchecked")
    @Action(block = Task.BlockingScope.APPLICATION)
    public Task generarFicheros() {
        Task t = new ExportarFaltasSenecaTask(MaimonidesApp.getApplication(), true);
        t.addTaskListener(new TaskListener() {

            @Override
            public void doInBackground(TaskEvent event) {
            }

            @Override
            public void process(TaskEvent event) {
            }

            @Override
            public void succeeded(TaskEvent event) {
            }

            @Override
            public void failed(TaskEvent event) {
            }

            @Override
            public void cancelled(TaskEvent event) {
            }

            @Override
            public void interrupted(TaskEvent event) {
            }

            @Override
            public void finished(TaskEvent event) {
                pInfo.removeAll();
                pInfo.add(new PanelInfoSeneca(), BorderLayout.CENTER);
            }
        });
        return t;
    }

    @Action(block = Task.BlockingScope.APPLICATION)
    public Task limpiarInfoEnviosSeneca() {
        return new LimpiarInfoEnviosSenecaTask(org.jdesktop.application.Application.getInstance(com.codeko.apps.maimonides.MaimonidesApp.class));
    }

    private class LimpiarInfoEnviosSenecaTask extends org.jdesktop.application.Task<Object, Void> {

        LimpiarInfoEnviosSenecaTask(org.jdesktop.application.Application app) {
            super(app);
            if (!GestorUsuarioClaveSeneca.getGestor().pedirUsuarioClave()) {
                cancel(true);
            }
        }

        @Override
        protected Object doInBackground() {
            ClienteSeneca cli = new ClienteSeneca(GestorUsuarioClaveSeneca.getGestor().getUsuario(), GestorUsuarioClaveSeneca.getGestor().getClave());
            cli.setDebugMode(MaimonidesApp.isDebug());
            cli.addPropertyChangeListener(new PropertyChangeListener() {

                @Override
                public void propertyChange(PropertyChangeEvent evt) {
                    firePropertyChange(evt.getPropertyName(), evt.getOldValue(), evt.getNewValue());
                }
            });

            return cli.limpiarResultadosEnvioFicherosFaltas();  // return your result
        }

        @Override
        protected void succeeded(Object result) {
            setMessage("Se han limpiado " + result + " resultados de envío.");
        }
    }

    @Action(block = Task.BlockingScope.APPLICATION, enabledProperty = "hayEnviosWeb")
    public Task enviarWeb() {
        return new EnviarWebTask(org.jdesktop.application.Application.getInstance(com.codeko.apps.maimonides.MaimonidesApp.class));
    }

    private class EnviarWebTask extends org.jdesktop.application.Task<Short, Void> {

        EnviosWeb ew = null;

        EnviarWebTask(org.jdesktop.application.Application app) {
            super(app);
            int op = JOptionPane.showConfirmDialog(MaimonidesApp.getApplication().getMainFrame(), "Se va a enviar el listado de faltas a la web.\nSólo se enviarán las faltas pendientes de enviar\n(nuevas o que hayan cambiado).\n¿Continuar?", "Confirmación", JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (op != JOptionPane.OK_OPTION) {
                cancel(false);
            }
        }

        @Override
        protected Short doInBackground() {
            try {
                ew = new EnviosWeb(EnviosWeb.TIPO_ENVIO_FALTAS);
                //Ahora cojemos cada elemento de la tabla y creamos un usuario web de tipo
                setMessage("Cargando listado de faltas pendientes...");
                PreparedStatement st = (PreparedStatement) MaimonidesApp.getApplication().getConector().getConexion().prepareStatement("SELECT pa.alumno_id,p.fecha,h.hora,pa.asistencia,h.materia_id,h.actividad_id,act.descripcion AS nombreActividad ,IFNULL(m.nombre,'') AS nombreMateria FROM partes_alumnos AS pa "
                        + " JOIN partes AS p ON p.id=pa.parte_id "
                        + " JOIN horarios AS h ON h.id=pa.horario_id "
                        + " JOIN actividades AS act ON act.id=h.actividad_id "
                        + " LEFT JOIN materias AS m ON m.id=h.materia_id "
                        + " WHERE p.ano=? AND pa.estado>0 ");
                st.setInt(1, MaimonidesApp.getApplication().getAnoEscolar().getId());
                ResultSet res = st.executeQuery();
                ArrayList<FaltaWeb> faltas = new ArrayList<FaltaWeb>();
                while (res.next()) {
                    String codMateriaActividad = Str.noNulo(res.getString("actividad_id")) + ":" + Str.noNulo(res.getString("materia_id"));
                    String descripcion = res.getString("nombreMateria");
                    if (descripcion.trim().equals("")) {
                        descripcion = res.getString("nombreActividad");
                    }
                    FaltaWeb fw = new FaltaWeb(res.getInt("alumno_id"), Fechas.toGregorianCalendar(res.getDate("fecha")), res.getInt("hora"), res.getInt("asistencia"), codMateriaActividad, descripcion);
                    faltas.add(fw);
                }
                setMessage("Enviando datos...");

                ew.addPropertyChangeListener(new PropertyChangeListener() {

                    @Override
                    public void propertyChange(PropertyChangeEvent evt) {
                        firePropertyChange(evt.getPropertyName(), evt.getOldValue(), evt.getNewValue());
                    }
                });
                if (faltas.size() > 0) {
                    ew.addElementos(faltas);
                    short retorno = ew.enviar();
                    if (retorno == EnviosWeb.RETORNO_OK) {
                        //Marcamos todas las faltas como enviadas
                        setMessage("Marcando faltas como enviadas...");
                        Statement stU = (Statement) MaimonidesApp.getConexion().createStatement();
                        int numActu = stU.executeUpdate("UPDATE partes_alumnos SET estado=0 WHERE estado=1 ");
                        ew.setUltimoMensaje("Se han enviado correctamente " + numActu + " faltas de asistencia.");
                        Obj.cerrar(stU);
                    }
                    return retorno;
                } else {
                    ew.setUltimoMensaje("No hay faltas pendientes de enviar.");
                    return EnviosWeb.RETORNO_OK;
                }
            } catch (SQLException ex) {
                Logger.getLogger(PanelAlumnos.class.getName()).log(Level.SEVERE, null, ex);
                ew.setUltimoMensaje("Error recuperando listado de faltas.");
            }
            return EnviosWeb.RETORNO_ERROR;
        }

        @Override
        protected void succeeded(Short result) {
            String titulo = "Datos enviados correctamente";
            int tipo = JOptionPane.INFORMATION_MESSAGE;
            if (result < 1) {
                titulo = "Error enviando datos";
                tipo = JOptionPane.ERROR_MESSAGE;
            }
            setMessage(titulo);
            JOptionPane.showMessageDialog(MaimonidesApp.getApplication().getMainFrame(), ew.getUltimoMensaje(), titulo, tipo);

        }
    }
    private boolean hayEnviosWeb = false;

    public boolean isHayEnviosWeb() {
        return hayEnviosWeb;
    }

    public void setHayEnviosWeb(boolean b) {
        boolean old = isHayEnviosWeb();
        this.hayEnviosWeb = b;
        firePropertyChange("hayEnviosWeb", old, isHayEnviosWeb());
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bEnviarWeb;
    private javax.swing.JButton bExportaSeneca;
    private javax.swing.JButton bManual;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private org.jdesktop.swingx.JXHeader jXHeader1;
    private javax.swing.JLabel lIcoSeneca;
    private javax.swing.JPanel pInfo;
    // End of variables declaration//GEN-END:variables
}
