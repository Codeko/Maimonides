/*
 * PanelCopiasSeguridad.java
 *
 * Created on 30 de octubre de 2008, 16:29
 */
package com.codeko.apps.maimonides.mantenimiento;

import com.codeko.apps.maimonides.IPanel;
import com.codeko.apps.maimonides.MaimonidesApp;
import java.awt.BorderLayout;
import java.awt.Desktop;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.File;

import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;
import org.jdesktop.application.Action;
import org.jdesktop.application.Task;

/**
 *
 * @author  Codeko
 */
public class PanelCopiasSeguridad extends javax.swing.JPanel implements IPanel {

    PanelInfoCopiasSeguridad panelInfoCopiasSeguridad1 = new PanelInfoCopiasSeguridad();

    /** Creates new form PanelCopiasSeguridad */
    public PanelCopiasSeguridad() {
        initComponents();
        panelWrap.add(panelInfoCopiasSeguridad1, BorderLayout.CENTER);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelWrap = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        bHacerCopia = new javax.swing.JButton();
        bRestaurarCopia = new javax.swing.JButton();
        bAbrirCarpeta = new javax.swing.JButton();

        setName("maimonides.paneles.herramientas.copias_seguridad"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(com.codeko.apps.maimonides.MaimonidesApp.class).getContext().getResourceMap(PanelCopiasSeguridad.class);
        panelWrap.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("panelWrap.border.title"))); // NOI18N
        panelWrap.setName("panelWrap"); // NOI18N
        panelWrap.setLayout(new java.awt.BorderLayout());

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("jPanel1.border.title"))); // NOI18N
        jPanel1.setName("jPanel1"); // NOI18N

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(com.codeko.apps.maimonides.MaimonidesApp.class).getContext().getActionMap(PanelCopiasSeguridad.class, this);
        bHacerCopia.setAction(actionMap.get("backup")); // NOI18N
        bHacerCopia.setName("bHacerCopia"); // NOI18N

        bRestaurarCopia.setAction(actionMap.get("restaurarBackup")); // NOI18N
        bRestaurarCopia.setName("bRestaurarCopia"); // NOI18N

        bAbrirCarpeta.setAction(actionMap.get("abrirCarpetaCopiasSeguridad")); // NOI18N
        bAbrirCarpeta.setName("bAbrirCarpeta"); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(bHacerCopia, javax.swing.GroupLayout.PREFERRED_SIZE, 225, Short.MAX_VALUE)
                    .addComponent(bRestaurarCopia, javax.swing.GroupLayout.DEFAULT_SIZE, 225, Short.MAX_VALUE)
                    .addComponent(bAbrirCarpeta, javax.swing.GroupLayout.PREFERRED_SIZE, 225, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(bHacerCopia)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bRestaurarCopia)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bAbrirCarpeta)
                .addContainerGap(14, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelWrap, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelWrap, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 152, Short.MAX_VALUE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    @Action(block = Task.BlockingScope.APPLICATION)
    public Task backup() {
        return new BackupTask(MaimonidesApp.getApplication());
    }

    private class BackupTask extends org.jdesktop.application.Task<File, Void> {

        Backup b = new Backup();

        BackupTask(org.jdesktop.application.Application app) {
            super(app);
        }

        @Override
        protected File doInBackground() {

            setMessage("Realizando copia de seguridad...");
            b.addPropertyChangeListener(new PropertyChangeListener() {

                @Override
                public void propertyChange(PropertyChangeEvent evt) {
                    firePropertyChange(evt.getPropertyName(), evt.getOldValue(), evt.getNewValue());
                }
            });
            return b.hacerBackup(true);

        }

        @Override
        public void cancelled() {
            if (b.getUltimoProceso() != null) {
                b.getUltimoProceso().destroy();
            }
            if (b.getUltimoDestino() != null) {
                if (!b.getUltimoDestino().delete()) {
                    b.getUltimoDestino().deleteOnExit();
                }
            }
        }

        @Override
        protected void succeeded(File result) {
            if (result != null && result.exists() && result.length() > 0) {
                Task t = moverCopia(result);
                MaimonidesApp.getApplication().getContext().getTaskService().execute(t);
            } else {
                JOptionPane.showMessageDialog(MaimonidesApp.getApplication().getMainFrame(), "Error realizando copia de seguridad.", "Error", JOptionPane.ERROR_MESSAGE);
            }
            panelInfoCopiasSeguridad1.actualizarDatos();
        }
    }

    @Action(block = Task.BlockingScope.APPLICATION)
    public Task restaurarBackup() {
        return new RestaurarBackupTask(MaimonidesApp.getApplication());
    }

    private class RestaurarBackupTask extends org.jdesktop.application.Task<Boolean, Void> {

        File f = null;

        RestaurarBackupTask(org.jdesktop.application.Application app) {
            super(app);
            JOptionPane.showMessageDialog(MaimonidesApp.getApplication().getMainFrame(), "Va a restaurar una copia de seguridad.\nTenga en cuenta que todos los datos de la base de datos actual se perderán.\nNo debe haber otras copias de Maimónides funcionando mientras se restaura una copia.", "Restaurar copia de seguridad", JOptionPane.WARNING_MESSAGE);
        }

        @Override
        protected Boolean doInBackground() {
            firePropertyChange("message", null, "Preparando restauración...");
            JFileChooser jfc = new JFileChooser(MaimonidesApp.getApplication().getUltimoArchivo());
            jfc.setSelectedFile(MaimonidesApp.getApplication().getUltimoArchivo());
            jfc.setDialogTitle("Seleccione la copia de seguridad a restaurar.");
            jfc.setFileFilter(new FileFilter() {

                @Override
                public boolean accept(File f) {
                    return f.isDirectory() || f.getName().toLowerCase().endsWith(".sql.zip");
                }

                @Override
                public String getDescription() {
                    return "Archivos SQL comprimidos (*.sql.zip)";
                }
            });
            int op = jfc.showOpenDialog(MaimonidesApp.getApplication().getMainFrame());
            if (op == JFileChooser.APPROVE_OPTION) {
                f = jfc.getSelectedFile();
                MaimonidesApp.getApplication().setUltimoArchivo(f);
            }
            if (f != null) {
                Backup b = new Backup();
                b.hacerBackup(MaimonidesApp.getApplication().getConfiguracion().getCarpetaSeguridadRestauracion(), true);
                b.addPropertyChangeListener(new PropertyChangeListener() {

                    @Override
                    public void propertyChange(PropertyChangeEvent evt) {
                        firePropertyChange(evt.getPropertyName(), evt.getOldValue(), evt.getNewValue());
                    }
                });
                return b.importar(f);
            }
            return null;
        }

        @Override
        protected void succeeded(Boolean result) {
            if (result != null) {
                if (result) {
                    JOptionPane.showMessageDialog(MaimonidesApp.getApplication().getMainFrame(), "Copia de seguridad restaurada con éxito.\nAhora el programa se reiniciará.", "Copia restaurada", JOptionPane.INFORMATION_MESSAGE);
                    MaimonidesApp.getApplication().reiniciar();
                } else {
                    JOptionPane.showMessageDialog(MaimonidesApp.getApplication().getMainFrame(), "Error restaurando la copia de seguridad", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }

    @Action
    public void abrirCarpetaCopiasSeguridad() {
        File f = MaimonidesApp.getApplication().getConfiguracion().getCarpetaCopias();
        try {
            Desktop.getDesktop().open(f);
        } catch (IOException ex) {
            Logger.getLogger(PanelCopiasSeguridad.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bAbrirCarpeta;
    private javax.swing.JButton bHacerCopia;
    private javax.swing.JButton bRestaurarCopia;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel panelWrap;
    // End of variables declaration//GEN-END:variables

    @Override
    public boolean puedoSusituir() {
        return true;
    }

    @Action
    public Task moverCopia(File origen) {
        return new MoverCopiaTask(org.jdesktop.application.Application.getInstance(com.codeko.apps.maimonides.MaimonidesApp.class), origen);
    }

    private class MoverCopiaTask extends org.jdesktop.application.Task<Object, Void> {

        File origen = null;

        MoverCopiaTask(org.jdesktop.application.Application app, File origen) {
            super(app);
            this.origen = origen;
        }

        @Override
        protected Object doInBackground() {
            boolean error = true;
            while (error) {
                error = false;
                JFileChooser jfc = new JFileChooser(MaimonidesApp.getApplication().getUltimoArchivo()) {

                    @Override
                    public void approveSelection() {
                        File f = getSelectedFile();
                        if (f.exists() && getDialogType() == SAVE_DIALOG) {
                            int result = JOptionPane.showConfirmDialog(getTopLevelAncestor(),
                                    "El archivo seleccionado ya existe. " +
                                    "¿Desea sobreescribirlo?",
                                    "El archivo ya existe",
                                    JOptionPane.YES_NO_CANCEL_OPTION,
                                    JOptionPane.QUESTION_MESSAGE);
                            switch (result) {
                                case JOptionPane.YES_OPTION:
                                    super.approveSelection();
                                    return;
                                case JOptionPane.NO_OPTION:
                                    return;
                                case JOptionPane.CANCEL_OPTION:
                                    cancelSelection();
                                    return;
                            }
                        }
                        super.approveSelection();
                    }
                };
                jfc.setSelectedFile(origen);
                jfc.setDialogTitle("¿Donde desea guardar la copia de seguridad?");
                jfc.setFileFilter(new FileFilter() {

                    @Override
                    public boolean accept(File f) {
                        return f.isDirectory() || f.getName().toLowerCase().endsWith(".sql.zip");
                    }

                    @Override
                    public String getDescription() {
                        return "Archivos SQL comprimidos (*.sql.zip)";
                    }
                });
                int op = jfc.showSaveDialog(MaimonidesApp.getApplication().getMainFrame());
                if (op == JFileChooser.APPROVE_OPTION) {
                    File destino = jfc.getSelectedFile();
                    if (!destino.getName().toLowerCase().endsWith(".sql.zip")) {
                        destino = new File(destino.getParentFile(), destino.getName() + ".sql.zip");
                    }
                    destino.delete();
                    MaimonidesApp.getApplication().setUltimoArchivo(destino);
                    setMessage("Moviendo archivo a " + destino + "...");
                    error = !origen.renameTo(destino);
                    if (error) {
                        JOptionPane.showMessageDialog(MaimonidesApp.getApplication().getMainFrame(), "No se ha podido guardar el archivo.\nSeleccione otra localización.", "Error", JOptionPane.ERROR_MESSAGE);
                    } else {
                        JOptionPane.showMessageDialog(MaimonidesApp.getApplication().getMainFrame(), "Copia de seguridad realizada con éxito en:\n" + destino.getAbsolutePath(), "Copia de seguridad realizada", JOptionPane.INFORMATION_MESSAGE);
                    }
                }
            }

            return null;  // return your result
        }

        @Override
        protected void succeeded(Object result) {
            // Runs on the EDT.  Update the GUI based on
            // the result computed by doInBackground().
        }
    }
}
