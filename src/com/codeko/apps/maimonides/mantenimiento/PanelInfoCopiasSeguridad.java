/*
 * PanelInfoCopiasSeguridad.java
 *
 * Created on 30 de octubre de 2008, 16:29
 */
package com.codeko.apps.maimonides.mantenimiento;

import com.codeko.apps.maimonides.ICargable;
import com.codeko.apps.maimonides.MaimonidesApp;
import com.codeko.apps.maimonides.MaimonidesUtil;
import com.codeko.swing.CdkProcesoLabel;
import com.codeko.util.Fechas;
import com.codeko.util.Num;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.io.File;
import java.io.FileFilter;
import java.util.GregorianCalendar;
import java.util.Vector;
import javax.swing.Box;
import javax.swing.JLabel;
import org.jdesktop.application.Action;
import org.jdesktop.application.Task;
import org.jdesktop.swingx.JXHyperlink;

/**
 *
 * @author  Codeko
 */
public class PanelInfoCopiasSeguridad extends javax.swing.JPanel implements ICargable {
    boolean cargado=false;
    /** Creates new form PanelInfoCopiasSeguridad */
    public PanelInfoCopiasSeguridad() {
        initComponents();
    }

    public void actualizarDatos() {
        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(com.codeko.apps.maimonides.MaimonidesApp.class).getContext().getActionMap(PanelInfoCopiasSeguridad.class, this);
        actionMap.get("actualizar").actionPerformed(new ActionEvent(this, 0, "actualizar"));
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setName("Form"); // NOI18N
        addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                formAncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.Y_AXIS));
    }// </editor-fold>//GEN-END:initComponents

private void formAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_formAncestorAdded
    cargar();
}//GEN-LAST:event_formAncestorAdded

    @Action(block = Task.BlockingScope.ACTION)
    public Task actualizar() {
        return new ActualizarTask(org.jdesktop.application.Application.getInstance(com.codeko.apps.maimonides.MaimonidesApp.class));
    }

    @Override
    public void cargar() {
        if(!isCargado()){
            actualizarDatos();
            setCargado(true);
        }
    }

    @Override
    public void vaciar() {
        setCargado(false);
    }

    @Override
    public boolean isCargado() {
        return cargado;
    }

    @Override
    public void setCargado(boolean cargado) {
        this.cargado=cargado;
    }

    private class ActualizarTask extends org.jdesktop.application.Task<Vector<Component>, Void> {
        ActualizarTask(org.jdesktop.application.Application app) {
            super(app);
            removeAll();
            CdkProcesoLabel cpl=new CdkProcesoLabel();
            cpl.setText("Verificando copias de seguridad...");
            cpl.setProcesando(true);
            add(cpl);
        }
        @Override protected Vector<Component> doInBackground() {
            Vector<Component> comps=new Vector<Component>();
            firePropertyChange("message", null, "Verificando copias de seguridad...");
            //Este panel se puede ejecutar sin conexión por lo que hay que verificarla
            if (MaimonidesApp.getApplication().getConector().isConectado()) {
                //Primero la última copia de seguridad
                GregorianCalendar ultimoBackup = MaimonidesApp.getApplication().getConfiguracion().getUltimoBackup();
                if (ultimoBackup.getTimeInMillis() != 0) {
                    String texto = "<html>La última copia de seguridad se realizó el <b>" + Fechas.format(ultimoBackup) + "</b>";
                    JLabel l = new JLabel(texto);
                    comps.add(l);
                }

                //Ahora verificamos el volumen y cantidad de copias
                File[] copias = MaimonidesApp.getApplication().getConfiguracion().getCarpetaCopias().listFiles(new FileFilter() {

                    @Override
                    public boolean accept(File pathname) {
                        return pathname != null && pathname.isFile() && (pathname.getName().toLowerCase().endsWith(".sql.zip") || pathname.getName().toLowerCase().endsWith(".sql"));
                    }
                });
                if (copias != null && copias.length != 0) {
                    long vol = 0;
                    for (File f : copias) {
                        vol += f.length();
                    }
                    double v = Num.round(new Double((vol / (double) 1024) / (double) 1024), 1);
                    String volumen = "<b>" + v + "MB</b>";
                    if (v > 500) {
                        volumen = "<FONT COLOR=RED><b>" + v + "MB</b></FONT>";
                    }
                    JLabel l = new JLabel("<html>Hay <b>" + copias.length + "</b> copias de seguridad almacenadas en este equipo (" + volumen + ").");
                    comps.add(l);
                    if (v > 500 || copias.length > 60) {
                        JXHyperlink jh = new JXHyperlink();
                        PanelCopiasSeguridad p = new PanelCopiasSeguridad();
                        jh.setAction(MaimonidesUtil.getActionTask(p, "abrirCarpetaCopiasSeguridad"));
                        jh.setText("<html>Abrir carpeta de copias de seguridad para hacer limpieza.");
                        comps.add(jh);
                    }
                }
            }
            return comps;
        }
        @Override protected void succeeded(Vector<Component> result) {
            removeAll();
            if(result.isEmpty()){
                result.add(new JLabel("No hay información de copias de seguridad."));
            }
            for(Component c:result){
                add(c); 
                add(Box.createRigidArea(new Dimension(10,10)));
            }
            updateUI();
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
