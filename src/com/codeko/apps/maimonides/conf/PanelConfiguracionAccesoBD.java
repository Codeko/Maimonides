/**
 *  Maimónides, gestión para centros escolares.
 *  Copyright Codeko and individual contributors
 *  as indicated by the @author tags.
 * 
 *  This is free software; you can redistribute it and/or modify it
 *  under the terms of the GNU General Public License as
 *  published by the Free Software Foundation; either version 2 of
 *  the License, or (at your option) any later version.
 * 
 *  This software is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 *  General Public License for more details.
 * 
 *  You should have received a copy of the GNU General Public
 *  License along with this software; if not, write to the Free
 *  Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 *  02110-1301 USA, or see the FSF site: http://www.fsf.org.
 *  
 *  For more information:
 *  maimonides@codeko.com
 *  http://codeko.com/maimonides
 **/
package com.codeko.apps.maimonides.conf;

import com.codeko.apps.maimonides.Conector;
import com.codeko.apps.maimonides.MaimonidesApp;
import com.codeko.apps.maimonides.MaimonidesUtil;
import com.codeko.util.Cripto;
import com.codeko.util.Obj;
import java.io.File;
import java.io.FileInputStream;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import org.jdesktop.application.Action;
import org.jdesktop.application.Task;

/**
 *
 * @author codeko
 */
public class PanelConfiguracionAccesoBD extends javax.swing.JPanel {

    PanelConfiguracionAccesoBD auto = this;

    /** Creates new form PanelConfiguracionAccesoBD */
    public PanelConfiguracionAccesoBD() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        tfHost = new javax.swing.JTextField();
        tfNombreBD = new javax.swing.JTextField();
        tfUsrBD = new javax.swing.JTextField();
        tfPassBD = new javax.swing.JPasswordField();
        bGuardar = new javax.swing.JButton();
        lInfo = new javax.swing.JLabel();

        setName("Form"); // NOI18N
        addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                formAncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance().getContext().getResourceMap(PanelConfiguracionAccesoBD.class);
        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N

        jLabel3.setText(resourceMap.getString("jLabel3.text")); // NOI18N
        jLabel3.setName("jLabel3"); // NOI18N

        jLabel4.setText(resourceMap.getString("jLabel4.text")); // NOI18N
        jLabel4.setName("jLabel4"); // NOI18N

        tfHost.setText(resourceMap.getString("tfHost.text")); // NOI18N
        tfHost.setName("tfHost"); // NOI18N

        tfNombreBD.setText(resourceMap.getString("tfNombreBD.text")); // NOI18N
        tfNombreBD.setName("tfNombreBD"); // NOI18N

        tfUsrBD.setText(resourceMap.getString("tfUsrBD.text")); // NOI18N
        tfUsrBD.setName("tfUsrBD"); // NOI18N

        tfPassBD.setText(resourceMap.getString("tfPassBD.text")); // NOI18N
        tfPassBD.setName("tfPassBD"); // NOI18N

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance().getContext().getActionMap(PanelConfiguracionAccesoBD.class, this);
        bGuardar.setAction(actionMap.get("guardar")); // NOI18N
        bGuardar.setName("bGuardar"); // NOI18N

        lInfo.setIcon(resourceMap.getIcon("lInfo.icon")); // NOI18N
        lInfo.setName("lInfo"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tfHost, javax.swing.GroupLayout.DEFAULT_SIZE, 217, Short.MAX_VALUE)
                            .addComponent(tfNombreBD, javax.swing.GroupLayout.DEFAULT_SIZE, 217, Short.MAX_VALUE)
                            .addComponent(tfUsrBD, javax.swing.GroupLayout.DEFAULT_SIZE, 217, Short.MAX_VALUE)
                            .addComponent(tfPassBD, javax.swing.GroupLayout.DEFAULT_SIZE, 217, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(lInfo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 381, Short.MAX_VALUE)
                        .addComponent(bGuardar)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(tfHost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(tfNombreBD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(tfUsrBD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(tfPassBD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bGuardar)
                    .addComponent(lInfo))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_formAncestorAdded
        MaimonidesUtil.ejecutarTask(this, "cargar");
    }//GEN-LAST:event_formAncestorAdded

    @Action(block = Task.BlockingScope.APPLICATION)
    public Task<Boolean, Void> cargar() {
        return new CargarTask(org.jdesktop.application.Application.getInstance(com.codeko.apps.maimonides.MaimonidesApp.class));
    }

    private class CargarTask extends org.jdesktop.application.Task<Boolean, Void> {

        Properties p = new Properties();

        CargarTask(org.jdesktop.application.Application app) {
            super(app);
        }

        @Override
        protected Boolean doInBackground() {
            boolean ret = true;
            setMessage("Cargando datos de conexión...");
            p = MaimonidesApp.getApplication().getConector().getConfiguracion();
            return ret;
        }

        @Override
        protected void succeeded(Boolean result) {
            if (result == null || !result) {
                JOptionPane.showMessageDialog(MaimonidesApp.getApplication().getMainFrame(), "Se ha producido algún error cargando los datos de conexión.", "Error", JOptionPane.ERROR_MESSAGE);
                setMessage("Se ha producido algún error cargando los datos de conexión.");
            } else {
                tfUsrBD.setText(p.getProperty("usuario", ""));
                tfHost.setText(p.getProperty("host", ""));
                tfNombreBD.setText(p.getProperty("bd", ""));
                tfPassBD.setText(p.getProperty("clave", ""));
                setMessage("Datos de conexión cargados correctamente.");
            }
            if (Conector.getConfigURL() != null) {
                lInfo.setToolTipText("Datos de conexión cargados de: " + Conector.getConfigURL());
            } else {
                lInfo.setToolTipText("Datos de conexión cargados de: Propiedades de usuario");
            }
        }
    }

    @Action(block = Task.BlockingScope.APPLICATION, enabledProperty = "saveEnabled")
    public Task<Boolean, Void> guardar() {
        return new GuardarTask(org.jdesktop.application.Application.getInstance(com.codeko.apps.maimonides.MaimonidesApp.class));
    }

    private class GuardarTask extends org.jdesktop.application.Task<Boolean, Void> {

        Properties p = new Properties();

        GuardarTask(org.jdesktop.application.Application app) {
            super(app);
            p.put("usuario", tfUsrBD.getText().trim());
            p.put("host", tfHost.getText().trim());
            p.put("bd", tfNombreBD.getText().trim());
            p.put("clave", new String(tfPassBD.getPassword()));
        }

        @Override
        protected Boolean doInBackground() {
            boolean ret = true;
            setMessage("Guardando datos de conexión...");
            try {
                ret = Conector.guardarConfiguracion(p);
            } catch (Exception ex) {
                Logger.getLogger(PanelConfiguracionAccesoBD.class.getName()).log(Level.SEVERE, null, ex);
                ret = false;
            }
            return ret;
        }

        @Override
        protected void succeeded(Boolean result) {
            if (result == null || !result) {
                JOptionPane.showMessageDialog(MaimonidesApp.getApplication().getMainFrame(), "Se ha producido algún error guardando los datos de conexión.", "Error", JOptionPane.ERROR_MESSAGE);
                setMessage("Se ha producido algún error guardando los datos de conexión.");
                this.firePropertyChange("guardar", null, false);
            } else {
                setMessage("Datos de conexión guardados correctamente.");
                auto.firePropertyChange("guardar", null, true);
            }
        }
    }

    public boolean isSaveEnabled() {
        return !Conector.isConfigReadOnly();
    }

    public void setSaveEnabled(boolean b) {
//        boolean old = isSaveEnabled();
//        this.saveEnabled = b;
//        firePropertyChange("saveEnabled", old, isSaveEnabled());
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bGuardar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel lInfo;
    private javax.swing.JTextField tfHost;
    private javax.swing.JTextField tfNombreBD;
    private javax.swing.JPasswordField tfPassBD;
    private javax.swing.JTextField tfUsrBD;
    // End of variables declaration//GEN-END:variables
}
