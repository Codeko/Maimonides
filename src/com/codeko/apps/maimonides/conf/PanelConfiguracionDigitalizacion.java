/**
 *  Maimónides, gestión para centros escolares.
 *  Copyright Codeko and individual contributors
 *  as indicated by the @author tags.
 * 
 *  This is free software; you can redistribute it and/or modify it
 *  under the terms of the GNU General Public License as
 *  published by the Free Software Foundation; either version 2 of
 *  the License, or (at your option) any later version.
 * 
 *  This software is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 *  General Public License for more details.
 * 
 *  You should have received a copy of the GNU General Public
 *  License along with this software; if not, write to the Free
 *  Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 *  02110-1301 USA, or see the FSF site: http://www.fsf.org.
 *  
 *  For more information:
 *  maimonides@codeko.com
 *  http://codeko.com/maimonides
 **/
/*
 * PanelConfiguracionDigitalizacion.java
 *
 * Created on 13-jul-2011, 12:07:56
 */
package com.codeko.apps.maimonides.conf;

import com.codeko.apps.maimonides.MaimonidesApp;
import com.codeko.apps.maimonides.MaimonidesUtil;
import com.codeko.apps.maimonides.digitalizacion.ConfiguracionParte;
import com.codeko.swing.CdkAutoTablaCol;
import java.awt.Component;
import java.lang.reflect.Field;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFormattedTextField;
import javax.swing.JLabel;
import org.jdesktop.application.Action;
import org.jdesktop.application.Task;
import org.jdesktop.swingx.JXFormattedTextField;

/**
 *
 * @author Codeko <codeko@codeko.com>
 */
public class PanelConfiguracionDigitalizacion extends javax.swing.JPanel {

    boolean cargado = false;

    /** Creates new form PanelConfiguracionDigitalizacion */
    public PanelConfiguracionDigitalizacion() {
        initComponents();
    }

    public boolean isCargado() {
        return cargado;
    }

    public void setCargado(boolean cargado) {
        this.cargado = cargado;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lCarpetaPartes = new javax.swing.JLabel();
        panelSelectorArchivo1 = new com.codeko.apps.maimonides.swing.PanelSelectorArchivo();
        bGuardar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        panelConfigParte = new javax.swing.JPanel();
        jXTitledSeparator1 = new org.jdesktop.swingx.JXTitledSeparator();

        addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                formAncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });

        lCarpetaPartes.setText("Carpeta partes escaneados");
        lCarpetaPartes.setName("lCarpetaPartes"); // NOI18N

        panelSelectorArchivo1.setName("panelSelectorArchivo1"); // NOI18N

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance().getContext().getActionMap(PanelConfiguracionDigitalizacion.class, this);
        bGuardar.setAction(actionMap.get("guardar")); // NOI18N
        bGuardar.setName("bGuardar"); // NOI18N

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane1.setName("jScrollPane1"); // NOI18N

        panelConfigParte.setName("panelConfigParte"); // NOI18N
        panelConfigParte.setLayout(new java.awt.GridLayout(0, 2));
        jScrollPane1.setViewportView(panelConfigParte);

        jXTitledSeparator1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/codeko/apps/maimonides/resources/error.png"))); // NOI18N
        jXTitledSeparator1.setTitle("Configuración avanzada digitalización partes");
        jXTitledSeparator1.setName("jXTitledSeparator1"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jXTitledSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 561, Short.MAX_VALUE)
                    .addComponent(bGuardar, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lCarpetaPartes, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(panelSelectorArchivo1, javax.swing.GroupLayout.DEFAULT_SIZE, 359, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 561, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(panelSelectorArchivo1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lCarpetaPartes))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jXTitledSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 311, Short.MAX_VALUE)
                .addComponent(bGuardar)
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(79, 79, 79)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 293, Short.MAX_VALUE)
                    .addGap(45, 45, 45)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_formAncestorAdded
        if (!isCargado()) {
            setCargado(true);
            MaimonidesUtil.ejecutarTask(this, "cargar");
        }
    }//GEN-LAST:event_formAncestorAdded

    @Action(block = Task.BlockingScope.ACTION)
    public Task<Object, Void> guardar() {
        return new GuardarTask(org.jdesktop.application.Application.getInstance());
    }

    private class GuardarTask extends org.jdesktop.application.Task<Object, Void> {

        GuardarTask(org.jdesktop.application.Application app) {
            super(app);
        }

        @Override
        protected Object doInBackground() {
            Configuracion cfg = MaimonidesApp.getApplication().getConfiguracion();
            cfg.setCarpetaPartes(panelSelectorArchivo1.getSelectedFile());
            Properties p = new Properties();
            for (Component c : panelConfigParte.getComponents()) {
                if (c instanceof JFormattedTextField) {
                    JFormattedTextField tf = (JFormattedTextField) c;
                    p.setProperty(tf.getName(), tf.getValue().toString());
                }
            }
            cfg.setGrupo(ConfiguracionParte.NOMBRE_GRUPO, p);
            ConfiguracionParte.getConfiguracion(true);
            return null;  // return your result
        }

        @Override
        protected void succeeded(Object result) {
            setMessage("Cambios guardados correctamente.");
        }
    }

    @Action
    public Task<Object, Void> cargar() {
        return new CargarTask(org.jdesktop.application.Application.getInstance());
    }

    private class CargarTask extends org.jdesktop.application.Task<Object, Void> {

        CargarTask(org.jdesktop.application.Application app) {
            super(app);
        }

        @Override
        protected Object doInBackground() {
            setMessage("Cargando configuración...");
            ConfiguracionParte cfg = ConfiguracionParte.getConfiguracion(true);
            panelSelectorArchivo1.setCurrentDirectory(MaimonidesApp.getApplication().getConfiguracion().getCarpetaPartes());
            panelSelectorArchivo1.setSelectedFile(MaimonidesApp.getApplication().getConfiguracion().getCarpetaPartes());
            for (Field f : cfg.getClass().getDeclaredFields()) {
                try {
                    CdkAutoTablaCol col = f.getAnnotation(CdkAutoTablaCol.class);
                    if (col.ignorar()) {
                        continue;
                    }
                    String nombre = f.getName();
                    JLabel l = new JLabel("    " + col.titulo() + "    ");
                    Object val = cfg.getValor(f, nombre);
                    JFormattedTextField tf = new JXFormattedTextField(col.titulo());
                    tf.setValue(val);
                    tf.setName(nombre);
                    tf.setOpaque(true);
                    panelConfigParte.add(l);
                    panelConfigParte.add(tf);
                } catch (Exception ex) {
                    Logger.getLogger(PanelConfiguracionDigitalizacion.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            setMessage("Configuración cargada.");
            return null;
        }

        @Override
        protected void succeeded(Object result) {
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bGuardar;
    private javax.swing.JScrollPane jScrollPane1;
    private org.jdesktop.swingx.JXTitledSeparator jXTitledSeparator1;
    private javax.swing.JLabel lCarpetaPartes;
    private javax.swing.JPanel panelConfigParte;
    private com.codeko.apps.maimonides.swing.PanelSelectorArchivo panelSelectorArchivo1;
    // End of variables declaration//GEN-END:variables
}
