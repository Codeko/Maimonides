/**
 *  Maimónides, gestión para centros escolares.
 *  Copyright Codeko and individual contributors
 *  as indicated by the @author tags.
 * 
 *  This is free software; you can redistribute it and/or modify it
 *  under the terms of the GNU General Public License as
 *  published by the Free Software Foundation; either version 2 of
 *  the License, or (at your option) any later version.
 * 
 *  This software is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 *  General Public License for more details.
 * 
 *  You should have received a copy of the GNU General Public
 *  License along with this software; if not, write to the Free
 *  Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 *  02110-1301 USA, or see the FSF site: http://www.fsf.org.
 *  
 *  For more information:
 *  maimonides@codeko.com
 *  http://codeko.com/maimonides
**/


/*
 * PanelConfiguracionImpresion.java
 *
 * Created on 12-may-2010, 13:40:56
 */
package com.codeko.apps.maimonides.conf;

import com.codeko.apps.maimonides.Configuracion;
import com.codeko.apps.maimonides.MaimonidesApp;
import com.codeko.util.Str;
import com.codeko.util.estructuras.Par;
import java.util.prefs.Preferences;
import org.jdesktop.application.Action;
import org.jdesktop.application.Task;

/**
 *
 * @author codeko
 */
public class PanelConfiguracionImpresion extends javax.swing.JPanel {

    /** Creates new form PanelConfiguracionImpresion */
    public PanelConfiguracionImpresion() {
        initComponents();
        Par<String, String> oo_linux = new Par<String, String>("OpenOffice: Localización en GNU/Linux", "/usr/lib/openoffice") {

            @Override
            public String toString() {
                return Str.noNulo(getA()) + " (" + Str.noNulo(getB()) + ")";
            }
        };
        Par<String, String> lo_linux = new Par<String, String>("LibreOffice: Localización en GNU/Linux", "/usr/lib/libreoffice") {

            @Override
            public String toString() {
                return Str.noNulo(getA()) + " (" + Str.noNulo(getB()) + ")";
            }
        };
        Par<String, String> defecto = new Par<String, String>("Configuración por defecto", null) {

            @Override
            public String toString() {
                return Str.noNulo(getA());
            }
        };
        cbLocalizacionOOO.addItem(Str.noNulo(Preferences.userNodeForPackage(PanelConfiguracionImpresion.class).get("office.home", System.getProperty("office.home"))));
        cbLocalizacionOOO.addItem(defecto);
        cbLocalizacionOOO.addItem(oo_linux);
        cbLocalizacionOOO.addItem(lo_linux);
        //TODO Añadir un autodetectar 
        cbLocalizacionOOO.setSelectedIndex(0);
        Configuracion cfg = MaimonidesApp.getApplication().getConfiguracion();
        cbImprimirPDF.setSelected(cfg.get("imprimir_en_PDF", "0").equals("1"));
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        cbLocalizacionOOO = new javax.swing.JComboBox();
        bGuardar = new javax.swing.JButton();
        cbImprimirPDF = new javax.swing.JCheckBox();

        setName("Form"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(com.codeko.apps.maimonides.MaimonidesApp.class).getContext().getResourceMap(PanelConfiguracionImpresion.class);
        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        cbLocalizacionOOO.setEditable(true);
        cbLocalizacionOOO.setName("cbLocalizacionOOO"); // NOI18N

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(com.codeko.apps.maimonides.MaimonidesApp.class).getContext().getActionMap(PanelConfiguracionImpresion.class, this);
        bGuardar.setAction(actionMap.get("guardar")); // NOI18N
        bGuardar.setName("bGuardar"); // NOI18N

        cbImprimirPDF.setText(resourceMap.getString("cbImprimirPDF.text")); // NOI18N
        cbImprimirPDF.setName("cbImprimirPDF"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbLocalizacionOOO, 0, 596, Short.MAX_VALUE))
                    .addComponent(bGuardar, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(cbImprimirPDF))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(cbLocalizacionOOO, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbImprimirPDF)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 194, Short.MAX_VALUE)
                .addComponent(bGuardar)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    @Action(block = Task.BlockingScope.APPLICATION)
    public Task guardar() {
        return new GuardarTask(org.jdesktop.application.Application.getInstance(com.codeko.apps.maimonides.MaimonidesApp.class));
    }

    private class GuardarTask extends org.jdesktop.application.Task<Object, Void> {

        GuardarTask(org.jdesktop.application.Application app) {
            super(app);
            setMessage("Guardando cambios...");
        }

        @Override
        protected Object doInBackground() {
            MaimonidesApp.getApplication().getConfiguracion().set("imprimir_en_PDF", cbImprimirPDF.isSelected() ? "1" : "0");
            Object obj = cbLocalizacionOOO.getSelectedItem();
            String valor = "";
            if (obj instanceof Par) {
                valor = ((Par<String, String>) obj).getB();
            } else {
                valor = Str.noNulo(obj);
            }
            if (Str.noNulo(valor).trim().equals("")) {
                Preferences.userNodeForPackage(PanelConfiguracionImpresion.class).remove("office.home");
            } else {
                Preferences.userNodeForPackage(PanelConfiguracionImpresion.class).put("office.home", valor);
            }
            return null;
        }

        @Override
        protected void succeeded(Object result) {
            setMessage("Cambios guardados correctamente.");
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bGuardar;
    private javax.swing.JCheckBox cbImprimirPDF;
    private javax.swing.JComboBox cbLocalizacionOOO;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables
}
