/**
 *  Maimónides, gestión para centros escolares.
 *  Copyright Codeko and individual contributors
 *  as indicated by the @author tags.
 * 
 *  This is free software; you can redistribute it and/or modify it
 *  under the terms of the GNU General Public License as
 *  published by the Free Software Foundation; either version 2 of
 *  the License, or (at your option) any later version.
 * 
 *  This software is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 *  General Public License for more details.
 * 
 *  You should have received a copy of the GNU General Public
 *  License along with this software; if not, write to the Free
 *  Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 *  02110-1301 USA, or see the FSF site: http://www.fsf.org.
 *  
 *  For more information:
 *  maimonides@codeko.com
 *  http://codeko.com/maimonides
 **/
/*
 * PanelConfgiracionDNIe.java
 *
 * Created on 12-sep-2011, 14:30:29
 */
package com.codeko.apps.maimonides.usr.config;

import com.codeko.apps.maimonides.IPanel;
import com.codeko.apps.maimonides.MaimonidesUtil;
import com.codeko.apps.maimonides.usr.Configuracion;
import javax.swing.SwingUtilities;
import org.jdesktop.application.Action;
import org.jdesktop.application.Task;

/**
 *
 * @author Codeko <codeko@codeko.com>
 */
public class PanelConfiguracionAcceso extends javax.swing.JPanel implements IPanel {

    public boolean loaded = false;

    /** Creates new form PanelConfgiracionDNIe */
    public PanelConfiguracionAcceso() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cbAccesoSeneca = new javax.swing.JCheckBox();
        bGuardar = new javax.swing.JButton();

        addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                formAncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });

        cbAccesoSeneca.setText("Permitir acceder al programa con usuario y clave de Séneca");
        cbAccesoSeneca.setName("cbAccesoSeneca"); // NOI18N

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance().getContext().getActionMap(PanelConfiguracionAcceso.class, this);
        bGuardar.setAction(actionMap.get("guardar")); // NOI18N
        bGuardar.setName("bGuardar"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(bGuardar, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(cbAccesoSeneca, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cbAccesoSeneca)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(bGuardar)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

private void formAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_formAncestorAdded
    if (!loaded) {
        loaded = true;
        MaimonidesUtil.ejecutarTask(this, "loadData");
    }
}//GEN-LAST:event_formAncestorAdded
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bGuardar;
    private javax.swing.JCheckBox cbAccesoSeneca;
    // End of variables declaration//GEN-END:variables

    @Override
    public boolean puedoSusituir() {
        return true;
    }

    @Action
    public Task<Object, Void> loadData() {
        return new LoadDataTask(org.jdesktop.application.Application.getInstance());
    }

    private class LoadDataTask extends org.jdesktop.application.Task<Object, Void> {

        LoadDataTask(org.jdesktop.application.Application app) {
            super(app);
        }

        @Override
        protected Object doInBackground() {
            final boolean accesoDesdeSeneca = Configuracion.isLoginWithSeneca();
            SwingUtilities.invokeLater(new Runnable() {

                @Override
                public void run() {
                    cbAccesoSeneca.setSelected(accesoDesdeSeneca);
                }
            });
            return null;
        }

        @Override
        protected void succeeded(Object result) {
        }
    }

    @Action(block = Task.BlockingScope.ACTION)
    public Task<Object, Void> guardar() {
        return new GuardarTask(org.jdesktop.application.Application.getInstance());
    }

    private class GuardarTask extends org.jdesktop.application.Task<Object, Void> {

        GuardarTask(org.jdesktop.application.Application app) {
            super(app);

        }

        @Override
        protected Object doInBackground() {
            Configuracion.setLoginWithSeneca(cbAccesoSeneca.isSelected());
            return null;
        }

        @Override
        protected void succeeded(Object result) {

        }
    }
}
