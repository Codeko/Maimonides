/**
 *  Maimónides, gestión para centros escolares.
 *  Copyright Codeko and individual contributors
 *  as indicated by the @author tags.
 * 
 *  This is free software; you can redistribute it and/or modify it
 *  under the terms of the GNU General Public License as
 *  published by the Free Software Foundation; either version 2 of
 *  the License, or (at your option) any later version.
 * 
 *  This software is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 *  General Public License for more details.
 * 
 *  You should have received a copy of the GNU General Public
 *  License along with this software; if not, write to the Free
 *  Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 *  02110-1301 USA, or see the FSF site: http://www.fsf.org.
 *  
 *  For more information:
 *  maimonides@codeko.com
 *  http://codeko.com/maimonides
**/


/*
 * PanelGeneracionExpulsiones.java
 *
 * Created on 28-ago-2009, 13:41:54
 */
package com.codeko.apps.maimonides.convivencia;

import com.codeko.apps.maimonides.IPanel;
import com.codeko.apps.maimonides.MaimonidesApp;
import com.codeko.apps.maimonides.MaimonidesUtil;
import com.codeko.apps.maimonides.convivencia.expulsiones.GeneradorExpulsiones;
import com.codeko.apps.maimonides.convivencia.expulsiones.PropuestaExpulsion;
import com.codeko.apps.maimonides.elementos.Curso;
import com.codeko.apps.maimonides.elementos.Unidad;
import com.codeko.swing.CodekoAutoTableModel;
import com.codeko.util.Num;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.RowFilter.Entry;
import org.jdesktop.application.Action;
import org.jdesktop.application.Task;
import org.jdesktop.swingx.sort.RowFilters.GeneralFilter;

/**
 *
 * @author Codeko
 */
public class PanelGeneracionExpulsiones extends javax.swing.JPanel implements IPanel {

    GeneradorExpulsiones generador = new GeneradorExpulsiones();
    PanelGeneracionExpulsiones auto = this;
    CodekoAutoTableModel<PropuestaExpulsion> modelo = new CodekoAutoTableModel<PropuestaExpulsion>(PropuestaExpulsion.class);
    //FilterPipeline filtroLimpio = new FilterPipeline();
    boolean cargado = false;
    Curso currentCurso = null;
    Unidad currentUnidad = null;
    GeneralFilter filter = new GeneralFilter() {

        @Override
        protected boolean include(Entry<? extends Object, ? extends Object> value, int index) {
            PropuestaExpulsion dato = modelo.getElemento(Num.getInt(value.getIdentifier()));
            boolean ok = true;
            if (currentCurso != null) {
                ok = ok && dato.getAlumno().getObjetoCurso().equals(currentCurso);
            }
            if (currentUnidad != null) {
                ok = ok && dato.getAlumno().getUnidad().equals(currentUnidad);
            }
            return ok;
        }
    };

    /** Creates new form PanelGeneracionExpulsiones */
    public PanelGeneracionExpulsiones() {
        initComponents();
        cbCursos1.addItemListener(new ItemListener() {

            @Override
            public void itemStateChanged(ItemEvent e) {
                cursoFilerChanged();
            }
        });

        cbGrupos1.addItemListener(new ItemListener() {

            @Override
            public void itemStateChanged(ItemEvent e) {
                cursoFilerChanged();
            }
        });
        tabla.setAutoCreateRowSorter(true);
        tabla.setRowFilter(filter);
        MaimonidesUtil.addMenuTabla(tabla, "Propuestas de expulsión");
    }

    private void cursoFilerChanged() {
        currentCurso = cbCursos1.getCurso();
        currentUnidad = cbGrupos1.getUnidad();
        tabla.setRowFilter(filter);
    }

    public boolean isCargado() {
        return cargado;
    }

    public void setCargado(boolean cargado) {
        this.cargado = cargado;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tabla = new org.jdesktop.swingx.JXTable();
        barraHerramientas = new javax.swing.JToolBar();
        bActualizar = new javax.swing.JButton();
        bBorrar = new javax.swing.JButton();
        bGenerar = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        cbCursos1 = new com.codeko.apps.maimonides.cursos.CbCursos();
        jLabel2 = new javax.swing.JLabel();
        cbGrupos1 = new com.codeko.apps.maimonides.cursos.CbGrupos();

        setName("maimonides.paneles.convivencia.propuestas"); // NOI18N
        setLayout(new java.awt.BorderLayout());

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        tabla.setModel(modelo);
        tabla.setColumnControlVisible(true);
        tabla.setName("tabla"); // NOI18N
        tabla.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                tablaAncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        jScrollPane1.setViewportView(tabla);

        add(jScrollPane1, java.awt.BorderLayout.CENTER);

        barraHerramientas.setFloatable(false);
        barraHerramientas.setRollover(true);
        barraHerramientas.setName("barraHerramientas"); // NOI18N

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(com.codeko.apps.maimonides.MaimonidesApp.class).getContext().getActionMap(PanelGeneracionExpulsiones.class, this);
        bActualizar.setAction(actionMap.get("actualizar")); // NOI18N
        bActualizar.setFocusable(false);
        bActualizar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bActualizar.setName("bActualizar"); // NOI18N
        bActualizar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        barraHerramientas.add(bActualizar);

        bBorrar.setAction(actionMap.get("aplazar")); // NOI18N
        bBorrar.setFocusable(false);
        bBorrar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bBorrar.setName("bBorrar"); // NOI18N
        bBorrar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        barraHerramientas.add(bBorrar);

        bGenerar.setAction(actionMap.get("generar")); // NOI18N
        bGenerar.setFocusable(false);
        bGenerar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bGenerar.setName("bGenerar"); // NOI18N
        bGenerar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        barraHerramientas.add(bGenerar);

        jPanel1.setName("jPanel1"); // NOI18N
        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(com.codeko.apps.maimonides.MaimonidesApp.class).getContext().getResourceMap(PanelGeneracionExpulsiones.class);
        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N
        jPanel1.add(jLabel1);

        cbCursos1.setComboGrupos(cbGrupos1);
        cbCursos1.setName("cbCursos1"); // NOI18N
        jPanel1.add(cbCursos1);

        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N
        jPanel1.add(jLabel2);

        cbGrupos1.setName("cbGrupos1"); // NOI18N
        jPanel1.add(cbGrupos1);

        barraHerramientas.add(jPanel1);

        add(barraHerramientas, java.awt.BorderLayout.PAGE_START);
    }// </editor-fold>//GEN-END:initComponents

    private void tablaAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_tablaAncestorAdded
        if (!isCargado()) {
            MaimonidesUtil.ejecutarTask(this, "actualizar");
        }
    }//GEN-LAST:event_tablaAncestorAdded

    @Override
    public boolean puedoSusituir() {
        return true;
    }

    @Action
    public Task actualizar() {
        return new ActualizarTask(org.jdesktop.application.Application.getInstance(com.codeko.apps.maimonides.MaimonidesApp.class));
    }

    private class ActualizarTask extends org.jdesktop.application.Task<ArrayList<PropuestaExpulsion>, Void> {

        ActualizarTask(org.jdesktop.application.Application app) {
            super(app);
            setCargado(true);
            modelo.vaciar();
        }

        @Override
        protected ArrayList<PropuestaExpulsion> doInBackground() {
            setMessage("Calculando propuestas de expulsión...");
            return generador.getPropuestasExpulsion();
        }

        @Override
        protected void succeeded(ArrayList<PropuestaExpulsion> result) {
            setMessage("Propuestas de expulsión calculadas.");
            modelo.addDatos(result);
            tabla.packAll();
        }
    }

    @Action
    public void aplazar() {
        int[] rows = tabla.getSelectedRows();
        ArrayList<PropuestaExpulsion> borrar = new ArrayList<PropuestaExpulsion>();
        for (int i : rows) {
            borrar.add(modelo.getElemento(tabla.convertRowIndexToModel(i)));
        }
        modelo.quitarDatos(borrar);
    }

    @Action(block = Task.BlockingScope.COMPONENT)
    public Task generar() {
        return new GenerarTask(org.jdesktop.application.Application.getInstance(com.codeko.apps.maimonides.MaimonidesApp.class));
    }

    private class GenerarTask extends org.jdesktop.application.Task<Object, Void> {

        ArrayList<PropuestaExpulsion> propuestas = null;

        GenerarTask(org.jdesktop.application.Application app) {
            super(app);
            int op = JOptionPane.showConfirmDialog(MaimonidesApp.getApplication().getMainFrame(), "Se van a generar las expulsiones correspondientes a los partes de convivencia listados (" + tabla.getRowCount() + ").\nEstos se marcarán como sancionados.\n¿Continuar?", "Generar expulsiones", JOptionPane.YES_NO_OPTION);
            if (op != JOptionPane.YES_OPTION) {
                setMessage("Generación de expulsiones cancelada.");
                cancel(false);
                propuestas.clear();
            } else {
                propuestas = new ArrayList<PropuestaExpulsion>();
                System.out.println(tabla.getRowCount());
                for (int i = 0; i < tabla.getRowCount(); i++) {
                    PropuestaExpulsion p = modelo.getElemento(tabla.convertRowIndexToModel(i));
                    propuestas.add(p);
                }
            }
        }

        @Override
        protected Object doInBackground() {
            setMessage("Aceptando propuestas de expulsión...");
            for (int i = 0; i < propuestas.size(); i++) {
                setProgress(i + 1, 0, propuestas.size());
                setMessage("Aceptando propuesta " + (i + 1) + " de " + propuestas.size() + "...");
                PropuestaExpulsion p = propuestas.get(i);
                p.aceptarPropuestaExpulsion();
            }
            return null;
        }

        @Override
        protected void succeeded(Object result) {
            String msg = "Se han generado " + propuestas.size() + " expulsiones.";
            setMessage(msg);
            JOptionPane.showMessageDialog(MaimonidesApp.getApplication().getMainFrame(), msg, "Generación de expulsiones", JOptionPane.INFORMATION_MESSAGE);
            MaimonidesUtil.ejecutarTask(auto, "actualizar");
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bActualizar;
    private javax.swing.JButton bBorrar;
    private javax.swing.JButton bGenerar;
    private javax.swing.JToolBar barraHerramientas;
    private com.codeko.apps.maimonides.cursos.CbCursos cbCursos1;
    private com.codeko.apps.maimonides.cursos.CbGrupos cbGrupos1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private org.jdesktop.swingx.JXTable tabla;
    // End of variables declaration//GEN-END:variables
}
