/*
 * PanelListadoExpulsiones.java
 *
 * Created on 02-sep-2009, 17:15:13
 */
package com.codeko.apps.maimonides.convivencia.expulsiones;

import com.codeko.apps.maimonides.IPanel;
import com.codeko.apps.maimonides.MaimonidesApp;
import com.codeko.apps.maimonides.MaimonidesUtil;
import com.codeko.apps.maimonides.cartero.Carta;
import com.codeko.apps.maimonides.cartero.CarteroAlumno;
import com.codeko.apps.maimonides.convivencia.Expulsion;
import com.codeko.apps.maimonides.convivencia.TipoConducta;
import com.codeko.apps.maimonides.elementos.Curso;
import com.codeko.apps.maimonides.elementos.Unidad;
import com.codeko.apps.maimonides.swing.NotificadoTableRowFilter;
import com.codeko.apps.maimonides.usr.Permisos;
import com.codeko.swing.CodekoAutoTableModel;
import com.codeko.util.Fechas;
import com.codeko.util.Obj;
import com.codeko.util.Str;
import com.mysql.jdbc.PreparedStatement;
import java.awt.Point;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.sql.ResultSet;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableCellRenderer;
import org.jdesktop.application.Action;
import org.jdesktop.application.Task;


/**
 *
 * @author Codeko
 */

public class PanelListadoExpulsiones extends javax.swing.JPanel implements IPanel {

    CodekoAutoTableModel<DatoListadoExpulsiones> modelo = new CodekoAutoTableModel<DatoListadoExpulsiones>(DatoListadoExpulsiones.class);
    PanelListadoExpulsiones auto = this;
    NotificadoTableRowFilter filter=new NotificadoTableRowFilter();

    /** Creates new form PanelListadoExpulsiones */
    public PanelListadoExpulsiones() {
        initComponents();
        tabla.setDefaultRenderer(GregorianCalendar.class, new DefaultTableCellRenderer() {

            @Override
            public void setValue(Object val) {
                if (val instanceof GregorianCalendar) {
                    setText(Fechas.format((GregorianCalendar) val));
                } else {
                    setText("");
                }
            }
        });
        MaimonidesUtil.setFormatosFecha(tfFecha, false);
        MaimonidesUtil.addMenuTabla(tabla, "Informe de expulsiones");
        tabla.setRowFilter(filter);
        if (Permisos.isUsuarioSoloProfesor()) {
            Unidad u = Permisos.getFiltroUnidad();
            if (u != null) {
                panelCBCursosGrupos1.setUnidad(u);
                panelCBCursosGrupos1.setEnabled(false);
            }
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        panelFiltro = new javax.swing.JPanel();
        panelCBCursosGrupos1 = new com.codeko.apps.maimonides.cursos.PanelCBCursosGrupos();
        jLabel1 = new javax.swing.JLabel();
        tfFecha = new org.jdesktop.swingx.JXDatePicker();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabla = new org.jdesktop.swingx.JXTable();
        barraHerramientas = new javax.swing.JToolBar();
        bActualizar = new javax.swing.JButton();
        bEnviarTodos = new javax.swing.JButton();
        bEnviarSeleccionados = new javax.swing.JButton();
        bFiltrarEnviados = new javax.swing.JToggleButton();

        setName("maimonides.paneles.convivencia.notificaciones"); // NOI18N
        setLayout(new java.awt.BorderLayout());

        jPanel1.setName("jPanel1"); // NOI18N
        jPanel1.setLayout(new java.awt.BorderLayout());

        panelFiltro.setName("panelFiltro"); // NOI18N

        panelCBCursosGrupos1.setName("panelCBCursosGrupos1"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(com.codeko.apps.maimonides.MaimonidesApp.class).getContext().getResourceMap(PanelListadoExpulsiones.class);
        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        tfFecha.setName("tfFecha"); // NOI18N

        javax.swing.GroupLayout panelFiltroLayout = new javax.swing.GroupLayout(panelFiltro);
        panelFiltro.setLayout(panelFiltroLayout);
        panelFiltroLayout.setHorizontalGroup(
            panelFiltroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelFiltroLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelFiltroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelCBCursosGrupos1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(panelFiltroLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tfFecha, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(193, Short.MAX_VALUE))
        );
        panelFiltroLayout.setVerticalGroup(
            panelFiltroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelFiltroLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelCBCursosGrupos1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelFiltroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(tfFecha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1.add(panelFiltro, java.awt.BorderLayout.NORTH);

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        tabla.setModel(modelo);
        tabla.setName("tabla"); // NOI18N
        tabla.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tabla);

        jPanel1.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        add(jPanel1, java.awt.BorderLayout.CENTER);

        barraHerramientas.setFloatable(false);
        barraHerramientas.setRollover(true);
        barraHerramientas.setName("barraHerramientas"); // NOI18N

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(com.codeko.apps.maimonides.MaimonidesApp.class).getContext().getActionMap(PanelListadoExpulsiones.class, this);
        bActualizar.setAction(actionMap.get("actualizar")); // NOI18N
        bActualizar.setFocusable(false);
        bActualizar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bActualizar.setName("bActualizar"); // NOI18N
        bActualizar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        barraHerramientas.add(bActualizar);

        bEnviarTodos.setAction(actionMap.get("enviarTodos")); // NOI18N
        bEnviarTodos.setFocusable(false);
        bEnviarTodos.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bEnviarTodos.setName("bEnviarTodos"); // NOI18N
        bEnviarTodos.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        barraHerramientas.add(bEnviarTodos);

        bEnviarSeleccionados.setAction(actionMap.get("enviarSeleccionados")); // NOI18N
        bEnviarSeleccionados.setFocusable(false);
        bEnviarSeleccionados.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bEnviarSeleccionados.setName("bEnviarSeleccionados"); // NOI18N
        bEnviarSeleccionados.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        barraHerramientas.add(bEnviarSeleccionados);

        bFiltrarEnviados.setIcon(resourceMap.getIcon("bFiltrarEnviados.icon")); // NOI18N
        bFiltrarEnviados.setSelected(true);
        bFiltrarEnviados.setText(resourceMap.getString("bFiltrarEnviados.text")); // NOI18N
        bFiltrarEnviados.setToolTipText(resourceMap.getString("bFiltrarEnviados.toolTipText")); // NOI18N
        bFiltrarEnviados.setFocusable(false);
        bFiltrarEnviados.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bFiltrarEnviados.setName("bFiltrarEnviados"); // NOI18N
        bFiltrarEnviados.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        bFiltrarEnviados.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bFiltrarEnviadosActionPerformed(evt);
            }
        });
        barraHerramientas.add(bFiltrarEnviados);

        add(barraHerramientas, java.awt.BorderLayout.NORTH);
    }// </editor-fold>//GEN-END:initComponents

    private void bFiltrarEnviadosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bFiltrarEnviadosActionPerformed
        filter.setSoloNotificados(bFiltrarEnviados.isSelected());
        tabla.setRowFilter(filter);
}//GEN-LAST:event_bFiltrarEnviadosActionPerformed

    private void tablaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaMouseClicked
        if (evt.getClickCount() == 2 && SwingUtilities.isLeftMouseButton(evt)) {
            //tenemos que ver la fila donde se ha hecho clic
            Point p = evt.getPoint();
            int row = tabla.rowAtPoint(p);
            if (row > -1) {
                row = tabla.convertRowIndexToModel(row);
                DatoListadoExpulsiones drc = modelo.getElemento(row);
                if (drc != null) {
                    MaimonidesApp.getMaimonidesView().mostrarFichaAlumno(drc.getAlumno());
                }
            }
        }
    }//GEN-LAST:event_tablaMouseClicked

    @Action(block = Task.BlockingScope.WINDOW)
    public Task actualizar() {
        return new ActualizarTask(org.jdesktop.application.Application.getInstance(com.codeko.apps.maimonides.MaimonidesApp.class));
    }

    @Override
    public boolean puedoSusituir() {
        return true;
    }

    private class ActualizarTask extends org.jdesktop.application.Task<ArrayList<DatoListadoExpulsiones>, Void> {

        Curso c = panelCBCursosGrupos1.getCurso();
        Unidad u = panelCBCursosGrupos1.getUnidad();
        Date fecha = null;

        ActualizarTask(org.jdesktop.application.Application app) {
            super(app);
            modelo.vaciar();
            try {
                tfFecha.commitEdit();
                fecha = tfFecha.getDate();
            } catch (ParseException ex) {
                Logger.getLogger(PanelListadoExpulsiones.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        @Override
        protected ArrayList<DatoListadoExpulsiones> doInBackground() {
            setMessage("Cargando datos...");
            ArrayList<DatoListadoExpulsiones> datos = new ArrayList<DatoListadoExpulsiones>();
            PreparedStatement st = null;
            ResultSet res = null;
            try {
                String append = "";
                if (fecha != null) {
                    append += "AND e.fecha<=? ";
                }
                if (u != null) {
                    append += " AND a.unidad_id=? ";
                } else if (c != null) {
                    append += " AND a.curso_id=? ";
                }
                st = (PreparedStatement) MaimonidesApp.getConexion().prepareStatement("SELECT e.* FROM expulsiones AS e JOIN alumnos AS a ON a.id=e.alumno_id WHERE e.ano=?  " + append + " ORDER BY a.curso_id,a.unidad_id");
                int cont = 1;
                st.setInt(cont, MaimonidesApp.getApplication().getAnoEscolar().getId());
                cont++;
                if (fecha != null) {
                    st.setDate(cont, new java.sql.Date(fecha.getTime()));
                    cont++;
                }
                if (u != null) {
                    st.setInt(cont, u.getId());
                    cont++;
                } else if (c != null) {
                    st.setInt(cont, c.getId());
                    cont++;
                }

                res = st.executeQuery();
                while (res.next()) {
                    Expulsion e = new Expulsion();
                    e.cargarDesdeResultSet(res);
                    DatoListadoExpulsiones d = new DatoListadoExpulsiones(e);
                    datos.add(d);
                }
            } catch (Exception ex) {
                Logger.getLogger(PanelListadoExpulsiones.class.getName()).log(Level.SEVERE, null, ex);
            }
            Obj.cerrar(st, res);
            return datos;
        }

        @Override
        protected void succeeded(ArrayList<DatoListadoExpulsiones> result) {
            modelo.setDatos(result);
            tabla.packAll();
            setMessage("Datos cargados correctamente.");
        }
    }

    @Action(block = Task.BlockingScope.WINDOW)
    public Task enviarTodos() {
        return new EnviarTodosTask(org.jdesktop.application.Application.getInstance(com.codeko.apps.maimonides.MaimonidesApp.class), true);
    }

    @Action(block = Task.BlockingScope.WINDOW)
    public Task enviarSeleccionados() {
        return new EnviarTodosTask(org.jdesktop.application.Application.getInstance(com.codeko.apps.maimonides.MaimonidesApp.class), false);
    }

    private class EnviarTodosTask extends org.jdesktop.application.Task<Boolean, Void> {

        ArrayList<DatoListadoExpulsiones> datos = new ArrayList<DatoListadoExpulsiones>();

        EnviarTodosTask(org.jdesktop.application.Application app, boolean todos) {
            super(app);
            if (todos) {
                for (int i = 0; i < tabla.getRowCount(); i++) {
                    datos.add(modelo.getElemento(tabla.convertRowIndexToModel(i)));
                }
            } else {
                int[] rows = tabla.getSelectedRows();
                for (int i : rows) {
                    datos.add(modelo.getElemento(tabla.convertRowIndexToModel(i)));
                }
            }
            if (datos.isEmpty()) {
                setMessage("No hay datos que enviar.");
                cancel(false);
            }
        }

        @Override
        protected Boolean doInBackground() {
            setMessage("Generando cartas...");
            CarteroAlumno<DatoListadoExpulsiones> cartero = new CarteroAlumno<DatoListadoExpulsiones>("expulsión", Carta.TIPO_CARTA_EXPULSION) {

                @Override
                protected void addDatosExtra(Map<String, Object> data, DatoListadoExpulsiones a, Carta carta) {
                    //Añadimos la ID de la expulsión a la carta para asociarlas
                    carta.addParametro(a.getExpulsion().getId() + "");

                    String tipoExpulsion = "grave";//Asigamos grave para indefinido y grave
                    //Ahora tenemos que ver si la expulsión es por grave o por reiterada
                    if (a.getExpulsion().getPartes().size() > 0) {
                        if (a.getExpulsion().getPartes().get(0).getTipo() == TipoConducta.GRAVEDAD_LEVE) {
                            tipoExpulsion = "reiterada";
                        }
                    }
                    data.put("tipoExpulsion", tipoExpulsion);

                    String fechaInicio = Fechas.format(a.getExpulsion().getFecha());
                    String fechaFin = Fechas.format(a.getExpulsion().getFechaUltimoDiaExpulsion());

                    data.put("fechaInicio", fechaInicio);
                    data.put("fechaFin", fechaFin);

                    data.put("numDias", a.getExpulsion().getDias() + "");

                }
            };
            cartero.addPropertyChangeListener(new PropertyChangeListener() {

                @Override
                public void propertyChange(PropertyChangeEvent evt) {
                    firePropertyChange(evt.getPropertyName(), evt.getOldValue(), evt.getNewValue());
                    if ("error".equals(evt.getPropertyName())) {
                        JOptionPane.showMessageDialog(MaimonidesApp.getApplication().getMainFrame(), Str.noNulo(evt.getNewValue()), "Error", JOptionPane.ERROR_MESSAGE);
                    }
                }
            });
            cartero.setCargarAsistenciaTotal(false);
            return cartero.enviar(datos);
        }

        @Override
        protected void succeeded(Boolean result) {
            if (result) {
                setMessage("Cartas enviadas correctamente.");
                JOptionPane.showMessageDialog(MaimonidesApp.getApplication().getMainFrame(), "Cartas impresas/enviadas correctamente", "Enviar", JOptionPane.INFORMATION_MESSAGE);
            } else {
                setMessage("Ha habido algún error enviando las notificaciones.");
            }
            MaimonidesUtil.ejecutarTask(auto, "actualizar");
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bActualizar;
    private javax.swing.JButton bEnviarSeleccionados;
    private javax.swing.JButton bEnviarTodos;
    private javax.swing.JToggleButton bFiltrarEnviados;
    private javax.swing.JToolBar barraHerramientas;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private com.codeko.apps.maimonides.cursos.PanelCBCursosGrupos panelCBCursosGrupos1;
    private javax.swing.JPanel panelFiltro;
    private org.jdesktop.swingx.JXTable tabla;
    private org.jdesktop.swingx.JXDatePicker tfFecha;
    // End of variables declaration//GEN-END:variables
}
