/*
 * PanelVisorConflictos.java
 *
 * Created on 22-abr-2009, 13:27:20
 */
package com.codeko.apps.maimonides.horarios;

import com.codeko.apps.maimonides.MaimonidesApp;
import com.codeko.apps.maimonides.elementos.Horario;
import com.codeko.swing.CodekoAutoTableModel;
import com.codeko.util.Num;
import java.util.ArrayList;
import java.util.Collection;
import javax.swing.SwingConstants;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableCellRenderer;
import org.jdesktop.application.ResourceMap;

/**
 *
 * @author Codeko
 */
public class PanelVisorConflictos extends javax.swing.JPanel {

    CodekoAutoTableModel<ConflictoHorario> modelo = new CodekoAutoTableModel<ConflictoHorario>(ConflictoHorario.class);
    ResourceMap rmap = null;

    /** Creates new form PanelVisorConflictos */
    public PanelVisorConflictos() {
        initComponents();

        rmap = MaimonidesApp.getApplication().getContext().getResourceMap(this.getClass());
        tabla.getColumnExt("Horarios").setCellRenderer(new DefaultTableCellRenderer() {

            @Override
            public void setValue(Object value) {
                @SuppressWarnings("unchecked")
                Collection<Horario> horarios = (Collection<Horario>) value;
                if (!horarios.isEmpty()) {
                    setText(horarios.size() + "");
                } else {
                    setText("");
                }
            }
        });
        tabla.getColumnExt("Tipo").setCellRenderer(new DefaultTableCellRenderer() {

            @Override
            public void setValue(Object value) {
                int tipo = Num.getInt(value);
                setHorizontalAlignment(SwingConstants.CENTER);
                setText("");
                switch (tipo) {
                    case ConflictoHorario.NO_HAY_ALUMNOS:
                        setIcon(rmap.getIcon("errorSinAlumnos.icon"));
                        break;
                    case ConflictoHorario.SOLAPADO_ALUMNO:
                        setIcon(rmap.getIcon("errorAlumnosSolapados.icon"));
                        break;
                    case ConflictoHorario.SOLAPADO_AULA:
                        setIcon(rmap.getIcon("errorAulaSolapada.icon"));
                        break;
                    case ConflictoHorario.SOLAPADO_PROFESOR:
                        setIcon(rmap.getIcon("errorProfesorSolapado.icon"));
                        break;
                    default:
                        setText(value + "");
                }
            }
        });
        tabla.getSelectionModel().addListSelectionListener(new ListSelectionListener() {

            @Override
            public void valueChanged(ListSelectionEvent e) {
                if (!e.getValueIsAdjusting()) {
                    int row = tabla.getSelectedRow();
                    if (row > -1) {
                        row = tabla.convertRowIndexToModel(row);
                        ConflictoHorario c = modelo.getElemento(row);
                        @SuppressWarnings("unchecked")
                        ArrayList<Horario> d = (ArrayList<Horario>) c.getHorarios().clone();
                        d.add(0, c.getHorario());
                        panelVisionLineasHorarios1.setDatos(d);

                    }
                }
            }
        });
    }

    public void setDatos(Collection<ConflictoHorario> datos) {
        vaciar();
        if (!datos.isEmpty()) {
            modelo.addDatos(datos);
            tabla.packAll();
            tabla.getSelectionModel().setSelectionInterval(0, 0);
        }
    }

    void vaciar() {
        modelo.vaciar();
        panelVisionLineasHorarios1.vaciar();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        split = new javax.swing.JSplitPane();
        scrollConflictos = new javax.swing.JScrollPane();
        tabla = new org.jdesktop.swingx.JXTable();
        panelVisionLineasHorarios1 = new com.codeko.apps.maimonides.horarios.PanelVisionLineasHorarios();

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(com.codeko.apps.maimonides.MaimonidesApp.class).getContext().getResourceMap(PanelVisorConflictos.class);
        setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("Form.border.title"))); // NOI18N
        setName("Form"); // NOI18N
        setLayout(new java.awt.BorderLayout());

        split.setDividerLocation(150);
        split.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        split.setName("split"); // NOI18N

        scrollConflictos.setName("scrollConflictos"); // NOI18N

        tabla.setModel(modelo);
        tabla.setColumnControlVisible(true);
        tabla.setName("tabla"); // NOI18N
        scrollConflictos.setViewportView(tabla);

        split.setLeftComponent(scrollConflictos);

        panelVisionLineasHorarios1.setName("panelVisionLineasHorarios1"); // NOI18N
        split.setRightComponent(panelVisionLineasHorarios1);

        add(split, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.codeko.apps.maimonides.horarios.PanelVisionLineasHorarios panelVisionLineasHorarios1;
    private javax.swing.JScrollPane scrollConflictos;
    private javax.swing.JSplitPane split;
    private org.jdesktop.swingx.JXTable tabla;
    // End of variables declaration//GEN-END:variables
}
