/**
 *  Maim贸nides, gesti贸n para centros escolares.
 *  Copyright Codeko and individual contributors
 *  as indicated by the @author tags.
 * 
 *  This is free software; you can redistribute it and/or modify it
 *  under the terms of the GNU General Public License as
 *  published by the Free Software Foundation; either version 2 of
 *  the License, or (at your option) any later version.
 * 
 *  This software is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 *  General Public License for more details.
 * 
 *  You should have received a copy of the GNU General Public
 *  License along with this software; if not, write to the Free
 *  Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 *  02110-1301 USA, or see the FSF site: http://www.fsf.org.
 *  
 *  For more information:
 *  maimonides@codeko.com
 *  http://codeko.com/maimonides
**/


/*
 * PanelPartesPendientes.java
 *
 * Created on 4 de noviembre de 2008, 17:35
 */
package com.codeko.apps.maimonides.partes.informes;

import com.codeko.apps.maimonides.partes.*;
import com.codeko.apps.maimonides.IPanel;
import com.codeko.apps.maimonides.MaimonidesApp;
import com.codeko.apps.maimonides.MaimonidesUtil;
import com.codeko.apps.maimonides.elementos.Curso;
import com.codeko.apps.maimonides.elementos.ParteFaltas;
import java.awt.event.MouseEvent;
import java.sql.ResultSet;
import com.codeko.swing.CodekoTableModel;
import com.codeko.util.Fechas;
import com.codeko.util.Obj;
import com.mysql.jdbc.PreparedStatement;
import java.awt.event.MouseAdapter;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ListSelectionModel;
import javax.swing.SwingUtilities;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableCellRenderer;
import org.jdesktop.application.Action;
import org.jdesktop.application.Task;
import org.jdesktop.swingx.table.TableColumnExt;

/**
 *
 * @author  Codeko
 */
public class PanelPartesPerdidosCursos extends javax.swing.JPanel implements IPanel {

    CodekoTableModel<ParteFaltas> modelo = new CodekoTableModel<ParteFaltas>(new ParteFaltas());
    CodekoTableModel<CursoPartesNoEntregados> modeloCursos = new CodekoTableModel<CursoPartesNoEntregados>(new CursoPartesNoEntregados());
    PanelPartesPerdidosCursos auto = this;
    boolean cargado = false;

    /** Creates new form PanelPartesPendientes */
    public PanelPartesPerdidosCursos() {
        initComponents();
        MaimonidesUtil.addMenuTabla(tabla, "Partes pendientes de digitalizar");
        MaimonidesUtil.addMenuTabla(tablaCursos, "Relaci贸n de partes pendientes de digitalizar agrupados por curso");
        tabla.getColumnExt("C贸digo").setVisible(false);
        TableColumnExt tc = tabla.getColumnExt("Fecha");
        tc.setCellRenderer(new DefaultTableCellRenderer() {

            @Override
            public void setValue(Object val) {
                setText(Fechas.format(val));
            }
        });
        tc.setMaxWidth(80);
        tabla.addMouseListener(new MouseAdapter() {

            @Override
            public void mouseClicked(MouseEvent e) {
                if (SwingUtilities.isLeftMouseButton(e) && e.getClickCount() == 2) {
                    int row = tabla.rowAtPoint(e.getPoint());
                    editarParte(modelo.getElemento(tabla.convertRowIndexToModel(row)));
                }
            }
        });
        tabla.getSelectionModel().addListSelectionListener(new ListSelectionListener() {

            @Override
            public void valueChanged(ListSelectionEvent e) {
                setParteSeleccionado(tabla.getSelectedRow() != -1);
            }
        });

        tablaCursos.getSelectionModel().addListSelectionListener(new ListSelectionListener() {

            @Override
            public void valueChanged(ListSelectionEvent e) {
                MaimonidesUtil.ejecutarTask(auto, "cargarPartes");
            }
        });
        tablaCursos.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
    }

    public boolean isCargado() {
        return cargado;
    }

    public void setCargado(boolean cargado) {
        this.cargado = cargado;
    }

    @Action
    private void editarParte(ParteFaltas parte) {
        PanelListaAlumnosParte.abrirEditorParte(parte);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bHerramientas = new javax.swing.JToolBar();
        bActualizar = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        split = new javax.swing.JSplitPane();
        scrollProfesores = new javax.swing.JScrollPane();
        tablaCursos = new org.jdesktop.swingx.JXTable();
        scroll = new javax.swing.JScrollPane();
        tabla = new org.jdesktop.swingx.JXTable();

        setName("Form"); // NOI18N
        addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                formAncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        setLayout(new java.awt.BorderLayout());

        bHerramientas.setRollover(true);
        bHerramientas.setName("bHerramientas"); // NOI18N

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(com.codeko.apps.maimonides.MaimonidesApp.class).getContext().getActionMap(PanelPartesPerdidosCursos.class, this);
        bActualizar.setAction(actionMap.get("actualizar")); // NOI18N
        bActualizar.setFocusable(false);
        bActualizar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bActualizar.setName("bActualizar"); // NOI18N
        bActualizar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        bHerramientas.add(bActualizar);

        jButton1.setAction(actionMap.get("editarParteSeleccionado")); // NOI18N
        jButton1.setFocusable(false);
        jButton1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton1.setName("jButton1"); // NOI18N
        jButton1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        bHerramientas.add(jButton1);

        add(bHerramientas, java.awt.BorderLayout.PAGE_START);

        split.setDividerLocation(250);
        split.setName("split"); // NOI18N

        scrollProfesores.setName("scrollProfesores"); // NOI18N

        tablaCursos.setModel(modeloCursos);
        tablaCursos.setColumnControlVisible(true);
        tablaCursos.setName("tablaCursos"); // NOI18N
        scrollProfesores.setViewportView(tablaCursos);

        split.setLeftComponent(scrollProfesores);

        scroll.setName("scroll"); // NOI18N

        tabla.setModel(modelo);
        tabla.setColumnControlVisible(true);
        tabla.setName("tabla"); // NOI18N
        scroll.setViewportView(tabla);

        split.setRightComponent(scroll);

        add(split, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

private void formAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_formAncestorAdded
//    if (!Beans.isDesignTime() && !isCargado()) {
//        MaimonidesUtil.ejecutarTask(this, "actualizar");
//    }
}//GEN-LAST:event_formAncestorAdded

    @Action(block = Task.BlockingScope.APPLICATION)
    public Task actualizar() {
        return new ActualizarProfesoresTask(org.jdesktop.application.Application.getInstance(com.codeko.apps.maimonides.MaimonidesApp.class));
    }

    @Action(block = Task.BlockingScope.APPLICATION)
    public Task cargarPartes() {
        return new ActualizarPartesTask(org.jdesktop.application.Application.getInstance(com.codeko.apps.maimonides.MaimonidesApp.class));
    }

    public static int getTotalPartes(String curso) {
        int total = 0;
        PreparedStatement st = null;
        ResultSet res = null;
        try {
            String sql = "SELECT count(distinct p.id) AS total FROM partes AS p "
                    + " JOIN cursos AS c ON c.curso=p.curso "
                    + " WHERE p.ano=? AND c.ano=? AND p.digitalizado=0 AND c.curso=? AND DATE(p.fecha)< DATE(NOW()) ";
            st = (PreparedStatement) MaimonidesApp.getApplication().getConector().getConexion().prepareStatement(sql);
            st.setInt(1, MaimonidesApp.getApplication().getAnoEscolar().getId());
            st.setInt(2, MaimonidesApp.getApplication().getAnoEscolar().getId());
            st.setString(3, curso);
            res = st.executeQuery();
            if (res.next()) {
                total = res.getInt("total");
            }
        } catch (SQLException ex) {
            Logger.getLogger(PanelPartesPerdidosCursos.class.getName()).log(Level.SEVERE, null, ex);
        }

        Obj.cerrar(res, st);
        return total;
    }

    private class ActualizarPartesTask extends org.jdesktop.application.Task<Object, Void> {

        Curso c = null;

        ActualizarPartesTask(org.jdesktop.application.Application app) {
            super(app);
            modelo.vaciar();
            setProgress(1);
            int row = tablaCursos.getSelectedRow();
            if (row > -1) {
                CursoPartesNoEntregados pf = modeloCursos.getElemento(tablaCursos.convertRowIndexToModel(row));
                c = pf.getCurso();
            }
        }

        @Override
        protected Object doInBackground() {
            if (c != null) {
                PreparedStatement st = null;
                ResultSet res = null;
                try {
                    int total = getTotalPartes(c.getCurso());
                    String sql = "SELECT distinct p.*  FROM partes AS p "
                            + " JOIN cursos AS c ON c.curso=p.curso "
                            + " WHERE p.ano=? AND c.ano=? AND p.digitalizado=0 AND c.curso=? AND DATE(p.fecha)< DATE(NOW()) "
                            + " ORDER BY p.fecha,p.id ";
                    st = (PreparedStatement) MaimonidesApp.getApplication().getConector().getConexion().prepareStatement(sql);
                    st.setInt(1, MaimonidesApp.getApplication().getAnoEscolar().getId());
                    st.setInt(2, MaimonidesApp.getApplication().getAnoEscolar().getId());
                    st.setString(3, c.getCurso());
                    res = st.executeQuery();
                    int pos = 0;
                    while (res.next() && !isCancelled()) {
                        pos++;
                        setMessage(String.format("Cargando partes de asistencias %d de %d...", pos, total));
                        setProgress(pos, 0, total);
                        ParteFaltas pFaltas = new ParteFaltas();
                        pFaltas.cargarDesdeResultSet(res);
                        modelo.addDato(pFaltas);
                    }
                } catch (SQLException ex) {
                    Logger.getLogger(PanelPartesPerdidosCursos.class.getName()).log(Level.SEVERE, null, ex);
                } finally {
                    Obj.cerrar(st, res);
                }
            }
            return null;
        }

        @Override
        protected void succeeded(Object result) {
            tabla.packAll();
        }
    }

    private class ActualizarProfesoresTask extends org.jdesktop.application.Task<Object, Void> {

        ActualizarProfesoresTask(org.jdesktop.application.Application app) {
            super(app);
            modeloCursos.vaciar();
            setProgress(1);
        }

        @Override
        protected Object doInBackground() {
            PreparedStatement st = null;
            ResultSet res = null;
            try {
                int total = MaimonidesUtil.getCount("profesores");
                String sql = "SELECT c.*,count(distinct p.id) AS total FROM partes AS p "
                        + " JOIN cursos AS c ON c.curso=p.curso "
                        + " WHERE p.ano=? AND c.ano=? AND p.digitalizado=0 AND DATE(p.fecha)< DATE(NOW()) "
                        + " GROUP BY c.curso "
                        + " ORDER BY total DESC";
                st = (PreparedStatement) MaimonidesApp.getApplication().getConector().getConexion().prepareStatement(sql);
                st.setInt(1, MaimonidesApp.getApplication().getAnoEscolar().getId());
                st.setInt(2, MaimonidesApp.getApplication().getAnoEscolar().getId());
                res = st.executeQuery();
                int pos = 0;
                while (res.next() && !isCancelled()) {
                    pos++;
                    setMessage(String.format("Cargando curso %d de %d...", pos, total));
                    setProgress(pos, 0, total);
                    Curso c = new Curso(res);
                    CursoPartesNoEntregados pn = new CursoPartesNoEntregados(c, res.getInt("total"));
                    modeloCursos.addDato(pn);
                }
            } catch (Exception ex) {
                Logger.getLogger(PanelPartesPerdidosCursos.class.getName()).log(Level.SEVERE, null, ex);
            } finally {
                Obj.cerrar(st, res);
            }
            return null;
        }

        @Override
        protected void succeeded(Object result) {
            tablaCursos.packAll();
            setCargado(true);
        }
    }
    private boolean parteSeleccionado = false;

    public boolean isParteSeleccionado() {
        return parteSeleccionado;
    }

    public void setParteSeleccionado(boolean b) {
        boolean old = isParteSeleccionado();
        this.parteSeleccionado = b;
        firePropertyChange("parteSeleccionado", old, isParteSeleccionado());
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bActualizar;
    private javax.swing.JToolBar bHerramientas;
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane scroll;
    private javax.swing.JScrollPane scrollProfesores;
    private javax.swing.JSplitPane split;
    private org.jdesktop.swingx.JXTable tabla;
    private org.jdesktop.swingx.JXTable tablaCursos;
    // End of variables declaration//GEN-END:variables

    @Override
    public boolean puedoSusituir() {
        return true;
    }

    @Action(enabledProperty = "parteSeleccionado")
    public void editarParteSeleccionado() {
        int row = tabla.getSelectedRow();
        if (row > -1) {
            ParteFaltas p = modelo.getElemento(tabla.convertRowIndexToModel(row));
            editarParte(p);
        }

    }
}
