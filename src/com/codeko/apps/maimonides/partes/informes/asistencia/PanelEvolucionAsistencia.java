/**
 *  Maimónides, gestión para centros escolares.
 *  Copyright Codeko and individual contributors
 *  as indicated by the @author tags.
 * 
 *  This is free software; you can redistribute it and/or modify it
 *  under the terms of the GNU General Public License as
 *  published by the Free Software Foundation; either version 2 of
 *  the License, or (at your option) any later version.
 * 
 *  This software is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 *  General Public License for more details.
 * 
 *  You should have received a copy of the GNU General Public
 *  License along with this software; if not, write to the Free
 *  Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 *  02110-1301 USA, or see the FSF site: http://www.fsf.org.
 *  
 *  For more information:
 *  maimonides@codeko.com
 *  http://codeko.com/maimonides
**/


/*
 * PanelEvolucionAsistencia.java
 *
 * Created on 12-may-2009, 11:18:14
 */
package com.codeko.apps.maimonides.partes.informes.asistencia;

import com.codeko.apps.maimonides.IPanel;
import com.codeko.apps.maimonides.MaimonidesApp;
import com.codeko.apps.maimonides.elementos.ParteFaltas;
import com.codeko.util.Obj;
import com.mysql.jdbc.PreparedStatement;
import java.awt.event.ComponentEvent;
import java.awt.event.ComponentListener;
import java.awt.image.BufferedImage;

import java.beans.Beans;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JPanel;
import org.jdesktop.application.Action;
import org.jdesktop.application.Task;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.JFreeChart;
import org.jfree.data.time.Day;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesCollection;

/**
 *
 * @author Codeko
 */
public class PanelEvolucionAsistencia extends javax.swing.JPanel implements IPanel{

    boolean cargado = false;
    JFreeChart chart = null;
    JPanel auto = this;

    /** Creates new form PanelEvolucionAsistencia */
    public PanelEvolucionAsistencia() {
        initComponents();
        auto.addComponentListener(new ComponentListener() {

            @Override
            public void componentResized(ComponentEvent e) {
                if (chart != null && isCargado()) {
                    lGrafico.setIcon(null);
                    auto.validate();
                    actualizarImagen();
                }

            }

            @Override
            public void componentMoved(ComponentEvent e) {
                //System.out.println("Movido");
            }

            @Override
            public void componentShown(ComponentEvent e) {
                //throw new UnsupportedOperationException("Not supported yet.");
            }

            @Override
            public void componentHidden(ComponentEvent e) {
                //throw new UnsupportedOperationException("Not supported yet.");
            }
        });
        if (!Beans.isDesignTime()) {
            tfFechaDesde.setDate(null);
            tfFechaHasta.setDate(null);
        }
    }

    private void actualizarImagen() {
        BufferedImage image = chart.createBufferedImage((int) panelImagen.getSize().getWidth() - 30, (int) panelImagen.getSize().getHeight() - 30);
        lGrafico.setIcon(new ImageIcon(image));
    }

    public boolean isCargado() {
        return cargado;
    }

    public void setCargado(boolean cargado) {
        this.cargado = cargado;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        cbIndeterminadas = new javax.swing.JCheckBox();
        cbAsistencia = new javax.swing.JCheckBox();
        cbInjustificada = new javax.swing.JCheckBox();
        cbJustificadas = new javax.swing.JCheckBox();
        cbRetrasos = new javax.swing.JCheckBox();
        cbRI = new javax.swing.JCheckBox();
        cbFaltas = new javax.swing.JCheckBox();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        tfFechaDesde = new org.jdesktop.swingx.JXDatePicker();
        jLabel2 = new javax.swing.JLabel();
        tfFechaHasta = new org.jdesktop.swingx.JXDatePicker();
        panelImagen = new javax.swing.JPanel();
        lGrafico = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        cbValores = new javax.swing.JCheckBox();
        cbMedias = new javax.swing.JCheckBox();

        setName("maimonides.paneles.faltas.informes.evolucion_asistencia"); // NOI18N
        addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                formAncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(com.codeko.apps.maimonides.MaimonidesApp.class).getContext().getActionMap(PanelEvolucionAsistencia.class, this);
        jButton1.setAction(actionMap.get("actualizar")); // NOI18N
        jButton1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton1.setName("jButton1"); // NOI18N
        jButton1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(com.codeko.apps.maimonides.MaimonidesApp.class).getContext().getResourceMap(PanelEvolucionAsistencia.class);
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("jPanel1.border.title"))); // NOI18N
        jPanel1.setName("jPanel1"); // NOI18N

        cbIndeterminadas.setSelected(true);
        cbIndeterminadas.setText(resourceMap.getString("cbIndeterminadas.text")); // NOI18N
        cbIndeterminadas.setName("cbIndeterminadas"); // NOI18N

        cbAsistencia.setText(resourceMap.getString("cbAsistencia.text")); // NOI18N
        cbAsistencia.setName("cbAsistencia"); // NOI18N

        cbInjustificada.setText(resourceMap.getString("cbInjustificada.text")); // NOI18N
        cbInjustificada.setName("cbInjustificada"); // NOI18N

        cbJustificadas.setText(resourceMap.getString("cbJustificadas.text")); // NOI18N
        cbJustificadas.setName("cbJustificadas"); // NOI18N

        cbRetrasos.setText(resourceMap.getString("cbRetrasos.text")); // NOI18N
        cbRetrasos.setName("cbRetrasos"); // NOI18N

        cbRI.setText(resourceMap.getString("cbRI.text")); // NOI18N
        cbRI.setName("cbRI"); // NOI18N

        cbFaltas.setSelected(true);
        cbFaltas.setText(resourceMap.getString("cbFaltas.text")); // NOI18N
        cbFaltas.setName("cbFaltas"); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cbIndeterminadas)
                    .addComponent(cbRetrasos)
                    .addComponent(cbInjustificada)
                    .addComponent(cbRI)
                    .addComponent(cbJustificadas)
                    .addComponent(cbFaltas)
                    .addComponent(cbAsistencia))
                .addContainerGap(60, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(cbIndeterminadas)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbRetrasos)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbInjustificada)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbRI)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cbJustificadas)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbFaltas)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbAsistencia)
                .addContainerGap())
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("jPanel2.border.title"))); // NOI18N
        jPanel2.setName("jPanel2"); // NOI18N

        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        tfFechaDesde.setName("tfFechaDesde"); // NOI18N

        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N

        tfFechaHasta.setName("tfFechaHasta"); // NOI18N

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tfFechaHasta, javax.swing.GroupLayout.DEFAULT_SIZE, 131, Short.MAX_VALUE)
                    .addComponent(tfFechaDesde, javax.swing.GroupLayout.DEFAULT_SIZE, 131, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(tfFechaDesde, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(tfFechaHasta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        panelImagen.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("panelImagen.border.title"))); // NOI18N
        panelImagen.setName("panelImagen"); // NOI18N
        panelImagen.setLayout(new java.awt.BorderLayout());

        lGrafico.setText(resourceMap.getString("lGrafico.text")); // NOI18N
        lGrafico.setName("lGrafico"); // NOI18N
        panelImagen.add(lGrafico, java.awt.BorderLayout.CENTER);

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("jPanel3.border.title"))); // NOI18N
        jPanel3.setName("jPanel3"); // NOI18N

        cbValores.setSelected(true);
        cbValores.setText(resourceMap.getString("cbValores.text")); // NOI18N
        cbValores.setName("cbValores"); // NOI18N

        cbMedias.setSelected(true);
        cbMedias.setText(resourceMap.getString("cbMedias.text")); // NOI18N
        cbMedias.setName("cbMedias"); // NOI18N

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(cbValores)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbMedias)
                .addContainerGap(34, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(cbValores)
                .addComponent(cbMedias))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelImagen, javax.swing.GroupLayout.DEFAULT_SIZE, 129, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(panelImagen, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_formAncestorAdded
//        if (!Beans.isDesignTime() && !isCargado()) {
//            MaimonidesUtil.ejecutarTask(this, "actualizar");
//        }
    }//GEN-LAST:event_formAncestorAdded

        @Action(block = Task.BlockingScope.ACTION)
    public Task actualizar() {
        return new ActualizarTask(org.jdesktop.application.Application.getInstance(com.codeko.apps.maimonides.MaimonidesApp.class));
    }

    @Override
    public boolean puedoSusituir() {
        return true;
    }

    private class ActualizarTask extends org.jdesktop.application.Task<Object, Void> {

        ActualizarTask(org.jdesktop.application.Application app) {
            super(app);
            setCargado(false);
            lGrafico.setIcon(null);
        }

        @Override
        protected Object doInBackground() {
            setMessage("Generando gráfica...");
            PreparedStatement st = null;
            ResultSet res = null;
            String extraFechaDesde = "";
            String extraFechaHasta = "";
            if (tfFechaDesde.getDate() != null) {
                extraFechaDesde = " AND p.fecha>=? ";
            }
            if (tfFechaHasta.getDate() != null) {
                extraFechaHasta = " AND p.fecha<=? ";
            }
            String sql = "select p.fecha" +
                    ", sum(IF(pa.asistencia=" + ParteFaltas.FALTA_INDETERMINADA + ",1,0)) AS totalInd " +
                    ", sum(IF(pa.asistencia=" + ParteFaltas.FALTA_ASISTENCIA + ",1,0)) AS totalAsis " +
                    ", sum(IF(pa.asistencia=" + ParteFaltas.FALTA_EXPULSION + ",1,0)) AS totalExp " +
                    ", sum(IF(pa.asistencia=" + ParteFaltas.FALTA_INJUSTIFICADA + ",1,0)) AS totalInj " +
                    ", sum(IF(pa.asistencia=" + ParteFaltas.FALTA_JUSTIFICADA + ",1,0)) AS totalJus " +
                    ", sum(IF(pa.asistencia=" + ParteFaltas.FALTA_RETRASO + ",1,0)) AS totalRet " +
                    " FROM partes_alumnos AS pa " +
                    " JOIN partes AS p ON pa.parte_id=p.id  " +
                    " WHERE 1=1  " + extraFechaDesde + extraFechaHasta +
                    " GROUP BY p.fecha ORDER BY p.fecha ASC ";
            try {
                st = (PreparedStatement) MaimonidesApp.getApplication().getConector().getConexion().prepareStatement(sql);
                int pos = 1;
                if (tfFechaDesde.getDate() != null) {
                    st.setDate(pos, new java.sql.Date(tfFechaDesde.getDate().getTime()));
                    pos++;
                }
                if (tfFechaHasta.getDate() != null) {
                    st.setDate(pos, new java.sql.Date(tfFechaHasta.getDate().getTime()));
                    pos++;
                }
                res = st.executeQuery();
                TimeSeriesCollection dataset = new TimeSeriesCollection();
                while (res.next()) {
                    Date fecha = (Date) res.getDate("fecha");
                    int totalInd = res.getInt("totalInd");
                    if (cbIndeterminadas.isSelected()) {
                        addSerie(dataset, "Indeterminadas", fecha, totalInd);
                    }
                    int totalAsis = res.getInt("totalAsis");
                    if (cbAsistencia.isSelected()) {
                        addSerie(dataset, "Asistencia", fecha, totalAsis);
                    }
                    int totalExp = res.getInt("totalExp");
                    int totalInj = res.getInt("totalInj");
                    if (cbInjustificada.isSelected()) {
                        addSerie(dataset, "Injustificadas", fecha, totalInj);
                    }
                    int totalJus = res.getInt("totalJus");
                    if (cbJustificadas.isSelected()) {
                        addSerie(dataset, "Justificadas", fecha, totalJus + totalExp);
                    }
                    int totalRet = res.getInt("totalRet");
                    if (cbRetrasos.isSelected()) {
                        addSerie(dataset, "Retrasos", fecha, totalRet);
                    }
                    if (cbRI.isSelected()) {
                        addSerie(dataset, "R+I", fecha, totalRet + totalInj);
                    }
                    if (cbFaltas.isSelected()) {
                        addSerie(dataset, "Faltas", fecha, totalRet + totalInj + totalJus + totalExp);
                    }
                }

                chart = ChartFactory.createTimeSeriesChart("Evolución de las faltas de asistencia", "Fecha", "Faltas", dataset, true, true, true);
                actualizarImagen();
            } catch (SQLException ex) {
                Logger.getLogger(PanelEvolucionAsistencia.class.getName()).log(Level.SEVERE, null, ex);
            }
            Obj.cerrar(st, res);
            return null;
        }

        @Override
        protected void succeeded(Object result) {
            setMessage("Grafica generada correctamente.");
            setCargado(true);
        }

        private void addSerie(TimeSeriesCollection dataset, String nombre, Date fecha, double valor) {
            //Primero el valor
            if (cbValores.isSelected()) {
                TimeSeries serie = dataset.getSeries(nombre);
                if (serie == null) {
                    serie = new TimeSeries(nombre);
                    serie.setKey(nombre);
                    dataset.addSeries(serie);
                }
                serie.add(new Day(fecha), valor);
            }
            //Luego la media
            if (cbMedias.isSelected()) {
                TimeSeries media = dataset.getSeries("Evolución " + nombre);
                if (media == null) {
                    media = new TimeSeries("Evolución " + nombre);
                    media.setKey("Evolución " + nombre);
                    dataset.addSeries(media);
                }
                int count = media.getItemCount();
                if (count > 0) {
                    double vals = valor;
                    //TODO Parametrizar media
                    for (int i = 0; i < count && i < 30; i++) {
                        vals += media.getDataItem(i).getValue().doubleValue();
                    }
                    vals /= (count + 1);
                    media.add(new Day(fecha), vals);
                } else {
                    media.add(new Day(fecha), valor);
                }
            }
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox cbAsistencia;
    private javax.swing.JCheckBox cbFaltas;
    private javax.swing.JCheckBox cbIndeterminadas;
    private javax.swing.JCheckBox cbInjustificada;
    private javax.swing.JCheckBox cbJustificadas;
    private javax.swing.JCheckBox cbMedias;
    private javax.swing.JCheckBox cbRI;
    private javax.swing.JCheckBox cbRetrasos;
    private javax.swing.JCheckBox cbValores;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JLabel lGrafico;
    private javax.swing.JPanel panelImagen;
    private org.jdesktop.swingx.JXDatePicker tfFechaDesde;
    private org.jdesktop.swingx.JXDatePicker tfFechaHasta;
    // End of variables declaration//GEN-END:variables
}
