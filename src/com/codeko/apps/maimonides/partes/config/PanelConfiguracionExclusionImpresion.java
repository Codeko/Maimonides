/**
 *  Maimónides, gestión para centros escolares.
 *  Copyright Codeko and individual contributors
 *  as indicated by the @author tags.
 * 
 *  This is free software; you can redistribute it and/or modify it
 *  under the terms of the GNU General Public License as
 *  published by the Free Software Foundation; either version 2 of
 *  the License, or (at your option) any later version.
 * 
 *  This software is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 *  General Public License for more details.
 * 
 *  You should have received a copy of the GNU General Public
 *  License along with this software; if not, write to the Free
 *  Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 *  02110-1301 USA, or see the FSF site: http://www.fsf.org.
 *  
 *  For more information:
 *  maimonides@codeko.com
 *  http://codeko.com/maimonides
 **/
/*
 * PanelConfiguracionExclusionImpresion.java
 *
 * Created on 26-sep-2011, 13:37:58
 */
package com.codeko.apps.maimonides.partes.config;

import com.codeko.apps.maimonides.ICargable;
import com.codeko.apps.maimonides.IPanel;
import com.codeko.apps.maimonides.MaimonidesUtil;
import com.codeko.apps.maimonides.elementos.Dependencia;
import com.codeko.apps.maimonides.elementos.Profesor;
import com.codeko.apps.maimonides.elementos.Unidad;
import com.codeko.swing.CodekoAutoTableModel;
import java.util.ArrayList;
import javax.swing.SwingUtilities;
import org.jdesktop.application.Action;
import org.jdesktop.application.Task;

/**
 *
 * @author Codeko <codeko@codeko.com>
 */
public class PanelConfiguracionExclusionImpresion extends javax.swing.JPanel implements IPanel, ICargable {

    CodekoAutoTableModel<ParBoolean> modeloProfesores = new CodekoAutoTableModel<ParBoolean>(ParBoolean.class);
    CodekoAutoTableModel<ParBoolean> modeloGrupos = new CodekoAutoTableModel<ParBoolean>(ParBoolean.class);
    CodekoAutoTableModel<ParBoolean> modeloDependencias = new CodekoAutoTableModel<ParBoolean>(ParBoolean.class);
    boolean cargado = false;

    /** Creates new form PanelConfiguracionExclusionImpresion */
    public PanelConfiguracionExclusionImpresion() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaProfesores = new org.jdesktop.swingx.JXTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablaGrupos = new org.jdesktop.swingx.JXTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        tabalDependencias = new org.jdesktop.swingx.JXTable();
        jLabel1 = new javax.swing.JLabel();
        bGuardar = new javax.swing.JButton();

        addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                formAncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });

        jTabbedPane1.setName("jTabbedPane1"); // NOI18N

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        tablaProfesores.setModel(modeloProfesores);
        tablaProfesores.setName("tablaProfesores"); // NOI18N
        jScrollPane1.setViewportView(tablaProfesores);

        jTabbedPane1.addTab("Profesores", new javax.swing.ImageIcon(getClass().getResource("/com/codeko/apps/maimonides/resources/user_gray.png")), jScrollPane1); // NOI18N

        jScrollPane2.setName("jScrollPane2"); // NOI18N

        tablaGrupos.setModel(modeloGrupos);
        tablaGrupos.setName("tablaGrupos"); // NOI18N
        jScrollPane2.setViewportView(tablaGrupos);

        jTabbedPane1.addTab("Grupos", new javax.swing.ImageIcon(getClass().getResource("/com/codeko/apps/maimonides/resources/group.png")), jScrollPane2); // NOI18N

        jScrollPane3.setName("jScrollPane3"); // NOI18N

        tabalDependencias.setModel(modeloDependencias);
        tabalDependencias.setName("tabalDependencias"); // NOI18N
        jScrollPane3.setViewportView(tabalDependencias);

        jTabbedPane1.addTab("Dependencias", new javax.swing.ImageIcon(getClass().getResource("/com/codeko/apps/maimonides/resources/building.png")), jScrollPane3); // NOI18N

        jLabel1.setText("Desde este punto puede indicar para que profesores, grupos y dependencias no se deben imprimir los partes de asistencia");
        jLabel1.setName("jLabel1"); // NOI18N

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance().getContext().getActionMap(PanelConfiguracionExclusionImpresion.class, this);
        bGuardar.setAction(actionMap.get("guardar")); // NOI18N
        bGuardar.setName("bGuardar"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(766, Short.MAX_VALUE)
                .addComponent(bGuardar)
                .addContainerGap())
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 866, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 266, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bGuardar)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_formAncestorAdded
        cargar();
    }//GEN-LAST:event_formAncestorAdded
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bGuardar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private org.jdesktop.swingx.JXTable tabalDependencias;
    private org.jdesktop.swingx.JXTable tablaGrupos;
    private org.jdesktop.swingx.JXTable tablaProfesores;
    // End of variables declaration//GEN-END:variables

    @Override
    public boolean puedoSusituir() {
        return true;
    }

    @Action
    public Task<Object, Void> guardar() {
        return new GuardarTask(org.jdesktop.application.Application.getInstance());
    }

    @Override
    public void cargar() {
        if (!isCargado()) {
            setCargado(true);
            MaimonidesUtil.ejecutarTask(this, "cargarDatos");
        }
    }

    @Override
    public void vaciar() {
        modeloDependencias.vaciar();
        modeloGrupos.vaciar();
        modeloProfesores.vaciar();
        setCargado(false);
    }

    @Override
    public boolean isCargado() {
        return cargado;
    }

    @Override
    public void setCargado(boolean cargado) {
        this.cargado = cargado;
    }

    private class GuardarTask extends org.jdesktop.application.Task<Object, Void> {

        GuardarTask(org.jdesktop.application.Application app) {
            super(app);
        }

        @Override
        protected Object doInBackground() {
            ArrayList<Integer> ids = new ArrayList<Integer>();
            for (ParBoolean pb : modeloProfesores.getDatos()) {
                if (pb.getValor()) {
                    Profesor p = (Profesor) pb.getObj();
                    ids.add(p.getId());
                }
            }
            com.codeko.apps.maimonides.partes.config.Configuracion.setIdsProfesoresImpresionParteFiltrado(ids);

            ids = new ArrayList<Integer>();
            for (ParBoolean pb : modeloGrupos.getDatos()) {
                if (pb.getValor()) {
                    Unidad p = (Unidad) pb.getObj();
                    ids.add(p.getId());
                }
            }
            com.codeko.apps.maimonides.partes.config.Configuracion.setIdsGruposImpresionParteFiltrado(ids);

            ids = new ArrayList<Integer>();
            for (ParBoolean pb : modeloDependencias.getDatos()) {
                if (pb.getValor()) {
                    Dependencia p = (Dependencia) pb.getObj();
                    ids.add(p.getId());
                }
            }
            com.codeko.apps.maimonides.partes.config.Configuracion.setIdsAulasImpresionParteFiltrado(ids);
            return null;
        }

        @Override
        protected void succeeded(Object result) {
            setMessage("Datos guardados correctamente.");
        }
    }

    @Action
    public Task<Object, Void> cargarDatos() {
        return new CargarTask(org.jdesktop.application.Application.getInstance());
    }

    private class CargarTask extends org.jdesktop.application.Task<Object, Void> {

        CargarTask(org.jdesktop.application.Application app) {
            super(app);
        }

        @Override
        protected Object doInBackground() {
            ArrayList<Profesor> profesores = Profesor.getProfesores();
            final ArrayList<ParBoolean> datosProf = new ArrayList<ParBoolean>();
            ArrayList<Integer> ids = com.codeko.apps.maimonides.partes.config.Configuracion.getIdsProfesoresImpresionParteFiltrado();
            for (Profesor p : profesores) {
                datosProf.add(new ParBoolean(p, ids.contains(p.getId())));
            }
            SwingUtilities.invokeLater(new Runnable() {

                @Override
                public void run() {
                    modeloProfesores.setDatos(datosProf);
                }
            });
            ids = com.codeko.apps.maimonides.partes.config.Configuracion.getIdsGruposImpresionParteFiltrado();
            ArrayList<Unidad> grupos = Unidad.getUnidades();
            final ArrayList<ParBoolean> datosUds = new ArrayList<ParBoolean>();
            for (Unidad p : grupos) {
                datosUds.add(new ParBoolean(p, ids.contains(p.getId())));
            }
            SwingUtilities.invokeLater(new Runnable() {

                @Override
                public void run() {
                    modeloGrupos.setDatos(datosUds);
                }
            });
            ids = com.codeko.apps.maimonides.partes.config.Configuracion.getIdsAulasImpresionParteFiltrado();
            ArrayList<Dependencia> dependencias = Dependencia.getDependencias();
            final ArrayList<ParBoolean> datosDeps = new ArrayList<ParBoolean>();
            for (Dependencia p : dependencias) {
                datosDeps.add(new ParBoolean(p, ids.contains(p.getId())));
            }
            SwingUtilities.invokeLater(new Runnable() {

                @Override
                public void run() {
                    modeloDependencias.setDatos(datosDeps);
                }
            });

            return null;
        }

        @Override
        protected void succeeded(Object result) {
            setMessage("Datos cargados correctamente");
        }
    }
}
