/*
 * PanelInfoPartes.java
 *
 * Created on 30 de octubre de 2008, 17:47
 */
package com.codeko.apps.maimonides.partes;

import com.codeko.apps.maimonides.ICargable;
import com.codeko.apps.maimonides.impresion.Impresion;
import com.codeko.apps.maimonides.MaimonidesApp;
import com.codeko.apps.maimonides.MaimonidesBean;
import com.codeko.apps.maimonides.MaimonidesUtil;
import com.codeko.apps.maimonides.digitalizacion.ConfiguracionParte;
import com.codeko.apps.maimonides.partes.cartas.ConfiguracionCartasAsistencia;
import com.codeko.apps.maimonides.partes.informes.PanelPartesPendientes;
import com.codeko.apps.maimonides.seneca.operaciones.calendario.GestorCalendarioSeneca;
import com.codeko.swing.CdkProcesoLabel;
import com.codeko.util.Fechas;
import com.codeko.util.Obj;
import com.mysql.jdbc.PreparedStatement;
import java.awt.Component;
import java.awt.Dimension;
import java.beans.Beans;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.File;
import java.io.FileFilter;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.GregorianCalendar;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.Box;
import javax.swing.ImageIcon;
import org.jdesktop.application.Action;
import org.jdesktop.application.Task;
import org.jdesktop.swingx.JXHyperlink;

/**
 *
 * @author  Codeko
 */
public class PanelInfoPartes extends javax.swing.JPanel implements ICargable {

    boolean cargado = false;

    /** Creates new form PanelInfoPartes */
    public PanelInfoPartes() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bImprimirPartes = new javax.swing.JButton();
        lInfoImpresionPartes = new javax.swing.JLabel();
        panelMensajes = new javax.swing.JPanel();

        setName("Form"); // NOI18N
        addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                formAncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(com.codeko.apps.maimonides.MaimonidesApp.class).getContext().getActionMap(PanelInfoPartes.class, this);
        bImprimirPartes.setAction(actionMap.get("imprimirPartes")); // NOI18N
        bImprimirPartes.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bImprimirPartes.setName("bImprimirPartes"); // NOI18N
        bImprimirPartes.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);

        lInfoImpresionPartes.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(com.codeko.apps.maimonides.MaimonidesApp.class).getContext().getResourceMap(PanelInfoPartes.class);
        lInfoImpresionPartes.setText(resourceMap.getString("lInfoImpresionPartes.text")); // NOI18N
        lInfoImpresionPartes.setName("lInfoImpresionPartes"); // NOI18N

        panelMensajes.setName("panelMensajes"); // NOI18N
        panelMensajes.setLayout(new javax.swing.BoxLayout(panelMensajes, javax.swing.BoxLayout.Y_AXIS));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(panelMensajes, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                    .addComponent(bImprimirPartes, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                    .addComponent(lInfoImpresionPartes, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(bImprimirPartes)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lInfoImpresionPartes)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelMensajes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

private void formAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_formAncestorAdded
    if (!Beans.isDesignTime()) {
        cargar();
    }
}//GEN-LAST:event_formAncestorAdded

    private GregorianCalendar getFechaProximaImpresion() {
        //Queremos el siguiente día que nos fin de semana
        GregorianCalendar cal = new GregorianCalendar();
        cal.add(GregorianCalendar.DAY_OF_MONTH, 1);
        while (cal.get(GregorianCalendar.DAY_OF_WEEK) == GregorianCalendar.SATURDAY || cal.get(GregorianCalendar.DAY_OF_WEEK) == GregorianCalendar.SUNDAY || GestorCalendarioSeneca.isFestivoDocente(cal)) {
            cal.add(GregorianCalendar.DAY_OF_MONTH, 1);
        }
        return cal;
    }
    private boolean partesNoImpresos = false;

    public boolean isPartesNoImpresos() {
        return partesNoImpresos;
    }

    public void setPartesNoImpresos(boolean b) {
        boolean old = isPartesNoImpresos();
        this.partesNoImpresos = b;
        firePropertyChange("partesNoImpresos", old, isPartesNoImpresos());
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bImprimirPartes;
    private javax.swing.JLabel lInfoImpresionPartes;
    private javax.swing.JPanel panelMensajes;
    // End of variables declaration//GEN-END:variables

    @Action
    public Task actualizarEstados() {
        return new ActualizarEstadosTask(org.jdesktop.application.Application.getInstance(com.codeko.apps.maimonides.MaimonidesApp.class));
    }

    @Override
    public void cargar() {
        if (!isCargado()) {
            MaimonidesUtil.ejecutarTask(this, "actualizarEstados");
            setCargado(true);
        }
    }

    @Override
    public void vaciar() {
        setCargado(false);
    }

    @Override
    public boolean isCargado() {
        return cargado;
    }

    @Override
    public void setCargado(boolean cargado) {
        this.cargado = cargado;
    }

    private class ActualizarEstadosTask extends org.jdesktop.application.Task<Vector<Component>, Void> {

        ActualizarEstadosTask(org.jdesktop.application.Application app) {
            super(app);
            panelMensajes.removeAll();
            CdkProcesoLabel cpl = new CdkProcesoLabel();
            cpl.setText("Verificando partes de asistencia...");
            cpl.setProcesando(true);
            panelMensajes.add(cpl);
        }

        @Override
        protected Vector<Component> doInBackground() {
            Vector<Component> comps = new Vector<Component>();
            verificarBotonImpresion();
            try {
                firePropertyChange("message", null, "Verificando mensajes de digitalización...");
                //Vemos si hay mensajes pendiente
                PreparedStatement st = (PreparedStatement) MaimonidesApp.getApplication().getConector().getConexion().prepareStatement("SELECT count(*) FROM partes_advertencias");
                ResultSet res = st.executeQuery();
                int num = 0;
                if (res.next()) {
                    num = res.getInt(1);
                }
                Obj.cerrar(st, res);
                if (num > 0) {
                    JXHyperlink hl = new JXHyperlink();
                    hl.setAction(MaimonidesUtil.getActionTask(MaimonidesApp.getMaimonidesView(), "digitalizarPartes"));
                    hl.setText("<html>Hay <b>" + num + "</b> advertencias de digitalización pendientes de revisar.");
                    comps.add(hl);
                }
                firePropertyChange("message", null, "Verificando partes pendientes de digitalizar...");
                num = PanelPartesPendientes.getTotalPartes();
                if (num > 0) {
                    JXHyperlink hl = new JXHyperlink();
                    hl.setAction(MaimonidesUtil.getActionTask(MaimonidesApp.getMaimonidesView(), "mostrarPanelPartesPendientes"));
                    hl.setText("<html>Hay <b>" + num + "</b> partes pendientes de digitalizar.");
                    hl.setIcon(MaimonidesUtil.getResourceMap(PanelInfoPartes.class).getIcon("info.icon"));
                    comps.add(hl);
                }

                firePropertyChange("message", null, "Verificando partes parcialmente digitalizados...");
                num = com.codeko.apps.maimonides.partes.informes.PanelPartesMedioDigitalizados.getTotalPartes();
                if (num > 0) {
                    JXHyperlink hl = new JXHyperlink();
                    hl.setAction(MaimonidesUtil.getActionTask(MaimonidesApp.getMaimonidesView(), "mostrarPanelPartesParcialmenteDigitalizados"));
                    hl.setText("<html>Hay <b>" + num + "</b> partes parcialmente digitalizados.");
                    hl.setIcon(MaimonidesUtil.getResourceMap(PanelInfoPartes.class).getIcon("info.icon"));
                    comps.add(hl);
                }
                firePropertyChange("message", null, "Verificando partes pendientes de digitalizar...");
                File carpeta = MaimonidesApp.getApplication().getConfiguracion().getCarpetaPartes();
                File[] pendientes = carpeta.listFiles(new FileFilter() {

                    @Override
                    public boolean accept(File pathname) {
                        return pathname.isFile() && pathname.getName().toLowerCase().endsWith("." + ConfiguracionParte.getConfiguracion().getExtensionImagenes());
                    }
                });
                if (pendientes != null && pendientes.length > 0) {
                    JXHyperlink hl = new JXHyperlink();
                    hl.setAction(MaimonidesUtil.getActionTask(MaimonidesApp.getMaimonidesView(), "digitalizarPartes"));
                    hl.setText("<html>Hay <b>" + pendientes.length + "</b> imágenes pendientes de digitalizar en la carpeta de partes escaneados.");
                    comps.add(hl);
                }
                firePropertyChange("message", null, "Verificando partes fallidos...");
                File carpetaFallidos = new File(MaimonidesApp.getApplication().getConfiguracion().getCarpetaPartes(), "fallidos");
                File[] fallidos = carpetaFallidos.listFiles(new FileFilter() {

                    @Override
                    public boolean accept(File pathname) {
                        return pathname.isFile() && pathname.getName().toLowerCase().endsWith("." + ConfiguracionParte.getConfiguracion().getExtensionImagenes());
                    }
                });
                if (fallidos != null && fallidos.length > 0) {
                    JXHyperlink hl = new JXHyperlink();
                    hl.setAction(MaimonidesUtil.getActionTask(MaimonidesApp.getMaimonidesView(), "digitalizarPartes"));
                    hl.setText("<html>Hay <b>" + fallidos.length + "</b> partes en la carpeta de partes fallidos.");
                    comps.add(hl);
                }
                if (ConfiguracionCartasAsistencia.isImprimirCartas()) {
                    firePropertyChange("message", null, "Verificando envío de cartas de asistencia...");
                    JXHyperlink hl = new JXHyperlink();
                    hl.setAction(MaimonidesUtil.getActionTask(new ConfiguracionCartasAsistencia(), "enviar"));
                    hl.setIcon(new ImageIcon(MaimonidesApp.class.getResource("resources/printer.png")));
                    hl.setText("Enviar/Imprimir cartas de notificación de faltas.");
                    comps.add(hl);
                }
            } catch (SQLException ex) {
                Logger.getLogger(PanelInfoPartes.class.getName()).log(Level.SEVERE, null, ex);
            }
            return comps;
        }

        @Override
        protected void succeeded(Vector<Component> result) {
            panelMensajes.removeAll();
            for (Component c : result) {
                panelMensajes.add(Box.createRigidArea(new Dimension(10, 10)));
                panelMensajes.add(c);
            }
            panelMensajes.updateUI();
        }

        private void verificarBotonImpresion() {
            firePropertyChange("message", null, "Verificando impresión de partes...");
            //Ahora vemos si los partes de hoy están impresos
            //String keyPartesHoy = "Partes de " + Fechas.format(getFechaProximaImpresion()) + " impresos.";
            //String val = MaimonidesApp.getApplication().getConfiguracion().get(keyPartesHoy, "");
            if (!CreadorPartes.isParteImpresos(getFechaProximaImpresion())) {
                setPartesNoImpresos(true);
                String info = "Imprimir partes del " + Fechas.format(getFechaProximaImpresion(), "EEEEE d 'de' MMMMM") + ".";
                lInfoImpresionPartes.setText("");
                bImprimirPartes.setText(info);
            } else {
                lInfoImpresionPartes.setText("Partes del " + Fechas.format(getFechaProximaImpresion(), "EEEEE d 'de' MMMMM") + " ya impresos.");
                setPartesNoImpresos(false);
            }
        }
    }

    @Action(block = Task.BlockingScope.APPLICATION, enabledProperty = "partesNoImpresos")
    public Task imprimirPartes() {
        return new ImprimirPartesTask(org.jdesktop.application.Application.getInstance(com.codeko.apps.maimonides.MaimonidesApp.class));
    }

    private class ImprimirPartesTask extends org.jdesktop.application.Task<Object, Void> {

        ImprimirPartesTask(org.jdesktop.application.Application app) {
            super(app);
        }

        @Override
        protected Object doInBackground() {
            CreadorPartes creador = new CreadorPartes(MaimonidesApp.getApplication().getAnoEscolar(), getFechaProximaImpresion());
            creador.addPropertyChangeListener(new PropertyChangeListener() {

                @Override
                public void propertyChange(PropertyChangeEvent evt) {
                    firePropertyChange(evt.getPropertyName(), evt.getOldValue(), evt.getNewValue());
                }
            });
            creador.recuperarPartes();
            MaimonidesBean bean = new MaimonidesBean();
            bean.addPropertyChangeListener(new PropertyChangeListener() {

                @Override
                public void propertyChange(PropertyChangeEvent evt) {
                    firePropertyChange(evt.getPropertyName(), evt.getOldValue(), evt.getNewValue());
                }
            });
            Impresion.getImpresion().imprimirPartes(bean, MaimonidesApp.getApplication().getAnoEscolar(), getFechaProximaImpresion());
            return null;
        }

        @Override
        protected void succeeded(Object result) {
            //String keyPartesHoy = "Partes de " + Fechas.format(getFechaProximaImpresion()) + " impresos.";
            String info = "Partes del " + Fechas.format(getFechaProximaImpresion(), "EEEEE d 'de' MMMMM") + " ya impresos.";
            //MaimonidesApp.getApplication().getConfiguracion().set(keyPartesHoy, info);
            CreadorPartes.setUltimaImpresionPartes(getFechaProximaImpresion());
            lInfoImpresionPartes.setText(info);
            setPartesNoImpresos(false);
        }
    }
}
