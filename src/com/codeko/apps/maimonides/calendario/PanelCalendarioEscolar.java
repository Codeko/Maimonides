/*
 * PanelCalendarioEscolar.java
 *
 * Created on 04-mar-2010, 16:48:16
 */
package com.codeko.apps.maimonides.calendario;

import com.codeko.apps.maimonides.DateCellEditor;
import com.codeko.apps.maimonides.ICargable;
import com.codeko.apps.maimonides.IPanel;
import com.codeko.apps.maimonides.MaimonidesApp;
import com.codeko.apps.maimonides.MaimonidesUtil;
import com.codeko.apps.maimonides.seneca.operaciones.calendario.GestorCalendarioSeneca;
import com.codeko.apps.maimonides.seneca.operaciones.calendario.TaskImportarCalendarioDesdeSeneca;
import com.codeko.apps.maimonides.usr.Permisos;
import com.codeko.swing.CodekoAutoTableModel;
import com.codeko.util.Fechas;
import java.util.ArrayList;
import java.util.GregorianCalendar;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableCellEditor;
import org.jdesktop.application.Action;
import org.jdesktop.application.Task;
import org.jdesktop.application.TaskEvent;
import org.jdesktop.application.TaskListener;

/**
 *
 * @author codeko
 */
public class PanelCalendarioEscolar extends javax.swing.JPanel implements IPanel, ICargable {

    CodekoAutoTableModel<DiaCalendarioEscolar> modelo = new CodekoAutoTableModel<DiaCalendarioEscolar>(DiaCalendarioEscolar.class) {

        @Override
        public void elementoModificado(DiaCalendarioEscolar elemento, int col, Object valor) {
            elemento.guardar();
        }
    };
    boolean cargado = false;

    /** Creates new form PanelCalendarioEscolar */
    public PanelCalendarioEscolar() {
        initComponents();
        MaimonidesUtil.addMenuTabla(tabla, "Calendario escolar");
        tabla.setDefaultRenderer(GregorianCalendar.class, new DefaultTableCellRenderer() {

            @Override
            public void setValue(Object val) {
                if (val instanceof GregorianCalendar) {
                    setText(Fechas.format((GregorianCalendar) val));
                } else {
                    setText("");
                }
            }
        });

        tabla.setDefaultEditor(GregorianCalendar.class, new DateCellEditor());
        tabla.getSelectionModel().addListSelectionListener(new ListSelectionListener() {

            @Override
            public void valueChanged(ListSelectionEvent e) {
                if (!e.getValueIsAdjusting()) {
                    int pos = tabla.getSelectedRow();
                    DiaCalendarioEscolar p = null;
                    if (pos != -1) {
                        pos = tabla.convertRowIndexToModel(pos);
                        p = modelo.getElemento(pos);
                        setDiaSeleccionado(p != null);
                    } else {
                        setDiaSeleccionado(false);
                    }
                    firePropertyChange("diaSeleccionado", null, p);
                }
            }
        });

        modelo.setEditable(Permisos.edicion(getClass()));

        bNuevo.setEnabled(Permisos.creacion(getClass()));
        bNuevo.setVisible(Permisos.creacion(getClass()));

        bBorrar.setEnabled(Permisos.borrado(getClass()));
        bBorrar.setVisible(Permisos.borrado(getClass()));

        bImportar.setEnabled(Permisos.especial(getClass()));
        bImportar.setVisible(Permisos.especial(getClass()));
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        barraHerramientas = new javax.swing.JToolBar();
        bActualizar = new javax.swing.JButton();
        bNuevo = new javax.swing.JButton();
        bBorrar = new javax.swing.JButton();
        bImportar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabla = new org.jdesktop.swingx.JXTable();

        setName("maimonides.paneles.datos.calendario"); // NOI18N
        addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                formAncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        setLayout(new java.awt.BorderLayout());

        barraHerramientas.setFloatable(false);
        barraHerramientas.setRollover(true);
        barraHerramientas.setName("barraHerramientas"); // NOI18N

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(com.codeko.apps.maimonides.MaimonidesApp.class).getContext().getActionMap(PanelCalendarioEscolar.class, this);
        bActualizar.setAction(actionMap.get("actualizar")); // NOI18N
        bActualizar.setFocusable(false);
        bActualizar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bActualizar.setName("bActualizar"); // NOI18N
        bActualizar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        barraHerramientas.add(bActualizar);

        bNuevo.setAction(actionMap.get("nuevo")); // NOI18N
        bNuevo.setFocusable(false);
        bNuevo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bNuevo.setName("bNuevo"); // NOI18N
        bNuevo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        barraHerramientas.add(bNuevo);

        bBorrar.setAction(actionMap.get("borrar")); // NOI18N
        bBorrar.setFocusable(false);
        bBorrar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bBorrar.setName("bBorrar"); // NOI18N
        bBorrar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        barraHerramientas.add(bBorrar);

        bImportar.setAction(actionMap.get("actualizarDesdeSeneca")); // NOI18N
        bImportar.setFocusable(false);
        bImportar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bImportar.setName("bImportar"); // NOI18N
        bImportar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        barraHerramientas.add(bImportar);

        add(barraHerramientas, java.awt.BorderLayout.PAGE_START);

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        tabla.setModel(modelo);
        tabla.setColumnControlVisible(true);
        tabla.setName("tabla"); // NOI18N
        jScrollPane1.setViewportView(tabla);

        add(jScrollPane1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void formAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_formAncestorAdded
        if (!isCargado()) {
            cargar();
        }
    }//GEN-LAST:event_formAncestorAdded

    @Override
    public boolean puedoSusituir() {
        return true;
    }

    @Action(block = Task.BlockingScope.APPLICATION)
    public Task actualizarDesdeSeneca() {
        TaskImportarCalendarioDesdeSeneca t = new TaskImportarCalendarioDesdeSeneca(org.jdesktop.application.Application.getInstance(com.codeko.apps.maimonides.MaimonidesApp.class));
        t.addTaskListener(new TaskListener<java.lang.Integer, java.lang.Void>() {

            @Override
            public void doInBackground(TaskEvent event) {
            }

            @Override
            public void process(TaskEvent event) {
            }

            @Override
            public void succeeded(TaskEvent event) {
                cargar();
            }

            @Override
            public void failed(TaskEvent event) {
            }

            @Override
            public void cancelled(TaskEvent event) {
            }

            @Override
            public void interrupted(TaskEvent event) {
            }

            @Override
            public void finished(TaskEvent event) {
                cargar();
            }
        });
        return t;
    }

    @Override
    public void cargar() {
        MaimonidesUtil.ejecutarTask(this, "actualizar");
    }

    @Override
    public void vaciar() {
        modelo.vaciar();
        setCargado(false);
    }

    @Override
    public boolean isCargado() {
        return cargado;
    }

    @Override
    public void setCargado(boolean cargado) {
        this.cargado = cargado;
    }

    @Action(block = Task.BlockingScope.WINDOW)
    public Task actualizar() {
        return new ActualizarTask(org.jdesktop.application.Application.getInstance(com.codeko.apps.maimonides.MaimonidesApp.class));
    }

    private class ActualizarTask extends org.jdesktop.application.Task<ArrayList<DiaCalendarioEscolar>, Void> {

        ActualizarTask(org.jdesktop.application.Application app) {
            super(app);
            vaciar();
            setCargado(true);
        }

        @Override
        protected ArrayList<DiaCalendarioEscolar> doInBackground() {
            GestorCalendarioSeneca.resetearCalendario();
            return GestorCalendarioSeneca.getCalendario();
        }

        @Override
        protected void succeeded(ArrayList<DiaCalendarioEscolar> result) {
            modelo.addDatos(result);
            tabla.packAll();
        }
    }

    @Action(block = Task.BlockingScope.WINDOW, enabledProperty = "diaSeleccionado")
    public Task borrar() {
        return new BorrarTask(org.jdesktop.application.Application.getInstance(com.codeko.apps.maimonides.MaimonidesApp.class));
    }

    private class BorrarTask extends org.jdesktop.application.Task<ArrayList<DiaCalendarioEscolar>, Void> {

        ArrayList<DiaCalendarioEscolar> dias = new ArrayList<DiaCalendarioEscolar>();

        BorrarTask(org.jdesktop.application.Application app) {
            super(app);
            int[] filas = tabla.getSelectedRows();
            int op = JOptionPane.showConfirmDialog(MaimonidesApp.getApplication().getMainFrame(), "¿Esta seguro de que desea borrar los días seleccionados (" + filas.length + ")?", "Borrar", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (op == JOptionPane.YES_OPTION) {
                for (int i : filas) {
                    int row = tabla.convertRowIndexToModel(i);
                    DiaCalendarioEscolar p = modelo.getElemento(row);
                    dias.add(p);
                }
                modelo.quitarDatos(dias);
            }
        }

        @Override
        protected ArrayList<DiaCalendarioEscolar> doInBackground() {
            firePropertyChange("message", null, "Borrando días...");
            ArrayList<DiaCalendarioEscolar> noBorrados = new ArrayList<DiaCalendarioEscolar>();
            if (dias != null) {
                for (DiaCalendarioEscolar p : dias) {
                    if (!p.borrar()) {
                        noBorrados.add(p);
                    }
                }
            }
            return noBorrados;
        }

        @Override
        protected void succeeded(ArrayList<DiaCalendarioEscolar> result) {
            if (result != null && result.size() > 0) {
                JOptionPane.showMessageDialog(MaimonidesApp.getApplication().getMainFrame(), "Algunos días no se han podido borrar.", "Borrar profesores", JOptionPane.WARNING_MESSAGE);
                modelo.addDatos(result);
            }
        }
    }
    private boolean diaSeleccionado = false;

    public boolean isDiaSeleccionado() {
        return diaSeleccionado;
    }

    public void setDiaSeleccionado(boolean b) {
        boolean old = isDiaSeleccionado();
        this.diaSeleccionado = b;
        firePropertyChange("diaSeleccionado", old, isDiaSeleccionado());
    }

    @Action(block = Task.BlockingScope.WINDOW)
    public Task nuevo() {
        return new NuevoTask(org.jdesktop.application.Application.getInstance(com.codeko.apps.maimonides.MaimonidesApp.class));
    }

    private class NuevoTask extends org.jdesktop.application.Task<DiaCalendarioEscolar, Void> {

        NuevoTask(org.jdesktop.application.Application app) {
            super(app);
        }

        @Override
        protected DiaCalendarioEscolar doInBackground() {
            DiaCalendarioEscolar p = new DiaCalendarioEscolar();
            p.setDia(new GregorianCalendar());
            if (p.guardar()) {
                return p;
            }
            return null;
        }

        @Override
        protected void succeeded(DiaCalendarioEscolar result) {
            if (result != null) {
                modelo.addDato(result);
                int row = tabla.getRowCount() - 1;
                tabla.scrollRowToVisible(row);
                tabla.editCellAt(row, 0);
                tabla.requestFocus();
                TableCellEditor tce = tabla.getCellEditor(row, 0);
                tce.shouldSelectCell(new ListSelectionEvent(tabla, row, row, false));
            }
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bActualizar;
    private javax.swing.JButton bBorrar;
    private javax.swing.JButton bImportar;
    private javax.swing.JButton bNuevo;
    private javax.swing.JToolBar barraHerramientas;
    private javax.swing.JScrollPane jScrollPane1;
    private org.jdesktop.swingx.JXTable tabla;
    // End of variables declaration//GEN-END:variables
}
